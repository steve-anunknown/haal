1:1-1:1::Haal.BlackBox.$trModule :: "GHC.Types.Module"
49:1-49:5::Haal.BlackBox.walk :: "forall a b c .\n(Haal.BlackBox.SUL<[]> a) =>\na b c -> [b] -> (a b c, [c])"
49:23-49:27::_ :: "forall a b . c a b -> a -> (c a b, b)"
52:1-52:7::Haal.BlackBox.inputs :: "forall a b c .\n(GHC.Classes.(%,%)<[]> (GHC.Classes.Ord a) ((GHC.Enum.Enum a), (GHC.Enum.Bounded a))) =>\nb a c -> (Data.Set.Internal.Set a)"
52:25-52:47::lq_anf$##7205759403792806473 :: "[a]"
52:26-52:34::lq_anf$##7205759403792806471 :: "a"
52:38-52:46::lq_anf$##7205759403792806472 :: "a"
55:1-55:8::Haal.BlackBox.outputs :: "forall a b c .\n(GHC.Classes.(%,%)<[]> (GHC.Classes.Ord a) ((GHC.Enum.Enum a), (GHC.Enum.Bounded a))) =>\nb c a -> (Data.Set.Internal.Set a)"
55:26-55:48::lq_anf$##7205759403792806544 :: "[a]"
55:27-55:35::lq_anf$##7205759403792806542 :: "a"
55:39-55:47::lq_anf$##7205759403792806543 :: "a"
70:1-70:8::Haal.BlackBox.initial :: "forall a b c d . (Haal.BlackBox.Automaton<[]> a b) => a c d -> b"
70:11-70:18::_ :: "forall a b . c a b -> d"
70:21-70:26::_ :: "forall a b . c a b -> c a b"
74:1-74:14::Haal.BlackBox.findReachable :: "forall a b c d .\n(Haal.BlackBox.Automaton<[]> a b, GHC.Classes.(%,%)<[]> (GHC.Classes.Ord c) ((GHC.Enum.Enum c), (GHC.Enum.Bounded c)), GHC.Classes.(%,%)<[]> (GHC.Classes.Ord b) ((GHC.Enum.Enum b), (GHC.Enum.Bounded b))) =>\na c d -> (Data.Set.Internal.Set b)"
74:15-74:24::automaton :: "a b c"
75:9-75:21::initialState :: "a"
75:24-75:41::_ :: "a"
75:32-75:41::automaton :: "{v : a b c | v == automaton##a2ar}"
76:9-76:17::alphabet :: "(Data.Set.Internal.Set a)"
76:20-76:36::_ :: "(Data.Set.Internal.Set a)"
76:27-76:36::automaton :: "{v : a b c | v == automaton##a2ar}"
77:9-77:12::bfs :: "(Data.Set.Internal.Set a) -> [a] -> (Data.Set.Internal.Set a)"
77:13-77:20::visited :: "(Data.Set.Internal.Set a)"
77:21-77:26::queue :: "[a]"
78:18-78:23::_ :: "{v : [a] | v == queue##a2aw\n           && len v >= 0}"
79:23-79:30::visited :: "{v : (Data.Set.Internal.Set a) | v == visited##a2av}"
81:25-81:27::mo :: "a b c"
81:30-81:51::_ :: "a b c"
81:37-81:46::automaton :: "{v : a b c | v == automaton##a2ar}"
81:47-81:51::curr :: "{VV : a | VV == curr##a2ax}"
82:25-82:35::nextStates :: "(Data.Set.Internal.Set a)"
82:38-82:80::_ :: "(Data.Set.Internal.Set a)"
82:46-82:71::lq_anf$##7205759403792806552 :: "a -> b"
82:47-82:54::_ :: "forall a b . c a b -> d"
82:57-82:60::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : a | VV == fst x1} | VV == fst}"
82:63-82:70::lq_anf$##7205759403792806550 :: "a -> (b a c, c)"
82:68-82:70::mo :: "{v : a b c | v == mo##a2az}"
82:72-82:80::alphabet :: "{v : (Data.Set.Internal.Set a) | v == alphabet##a2at}"
83:25-83:35::newVisited :: "{v : (Data.Set.Internal.Set a) | v == Set_cup visited##a2av nextStates##a2aA}"
83:38-83:66::_ :: "{v : (Data.Set.Internal.Set a) | v == Set_cup visited##a2av nextStates##a2aA}"
83:48-83:55::visited :: "{v : (Data.Set.Internal.Set a) | v == visited##a2av}"
83:56-83:66::nextStates :: "{v : (Data.Set.Internal.Set a) | v == nextStates##a2aA}"
85:25-85:33::newQueue :: "[a]"
85:36-85:82::lq_anf$##7205759403792806554 :: "[a]"
85:47-85:82::lq_anf$##7205759403792806553 :: "{v : (Data.Set.Internal.Set a) | v == Set_dif nextStates##a2aA visited##a2av}"
85:63-85:73::nextStates :: "{v : (Data.Set.Internal.Set a) | v == nextStates##a2aA}"
85:74-85:81::visited :: "{v : (Data.Set.Internal.Set a) | v == visited##a2av}"
85:86-85:92::queue' :: "{v : [a] | v == queue'##a2ay\n           && len v >= 0}"
86:29-86:39::newVisited :: "{v : (Data.Set.Internal.Set a) | v == newVisited##a2aB\n                                 && v == Set_cup visited##a2av nextStates##a2aA}"
86:40-86:48::newQueue :: "{v : [a] | v == newQueue##a2aC\n           && len v >= 0}"
87:13-87:41::lq_anf$##7205759403792806555 :: "{v : (Data.Set.Internal.Set a) | v == Set_sng initialState##a2as}"
87:28-87:40::initialState :: "{VV : a | VV == initialState##a2as}"
87:42-87:56::lq_anf$##7205759403792806557 :: "{v : [a] | head v == initialState##a2as}"
87:43-87:55::initialState :: "{VV : a | VV == initialState##a2as}"
95:1-95:16::Haal.BlackBox.accessSequences :: "forall a b c d .\n(Haal.BlackBox.Automaton<[]> d a, GHC.Classes.(%,%)<[]> (GHC.Classes.Ord b) ((GHC.Enum.Enum b), (GHC.Enum.Bounded b)), GHC.Classes.Ord<[]> a) =>\nd b c -> (Data.Map.Internal.Map a [b])"
95:17-95:20::aut :: "a b c"
95:23-95:99::bfs :: "[(a, [b])] -> (Data.Set.Internal.Set a) -> (Data.Map.Internal.Map a [b]) -> (Data.Map.Internal.Map a [b])"
95:27-95:44::lq_anf$##7205759403792806583 :: "[(a, [b])]"
95:28-95:43::lq_anf$##7205759403792806581 :: "{v : (a, [b]) | fst v == initialSt##a2aF\n                && x_Tuple21 v == initialSt##a2aF}"
95:29-95:38::initialSt :: "{VV : a | VV == initialSt##a2aF}"
95:40-95:42::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && len v == 0} | VV == []}"
95:45-95:70::lq_anf$##7205759403792806584 :: "{v : (Data.Set.Internal.Set a) | v == Set_sng initialSt##a2aF}"
95:60-95:69::initialSt :: "{VV : a | VV == initialSt##a2aF}"
95:71-95:99::lq_anf$##7205759403792806586 :: "(Data.Map.Internal.Map a [b])"
95:86-95:95::initialSt :: "{VV : a | VV == initialSt##a2aF}"
95:96-95:98::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && len v == 0} | VV == []}"
97:5-97:13::alphabet :: "[a]"
97:16-97:39::_ :: "[a]"
97:27-97:39::lq_anf$##7205759403792806558 :: "(Data.Set.Internal.Set a)"
97:35-97:38::aut :: "{v : a b c | v == aut##a2aD}"
98:5-98:14::initialSt :: "a"
98:17-98:28::_ :: "a"
98:25-98:28::aut :: "{v : a b c | v == aut##a2aD}"
101:5-101:8::bfs :: "[(a, [b])] -> (Data.Set.Internal.Set a) -> (Data.Map.Internal.Map a [b]) -> (Data.Map.Internal.Map a [b])"
101:14-101:17::acc :: "(Data.Map.Internal.Map a [b])"
101:20-101:44::lq_anf$##7205759403792806560 :: "x1:[a] -> {v : [a] | len v == len x1}"
101:28-101:40::_ :: "{VV : forall a .\n      x1:[a] -> {v : [a] | len v == len x1} | VV == reverse}"
101:41-101:44::acc :: "{v : (Data.Map.Internal.Map a [b]) | v == acc##a2aH}"
103:9-103:49::bfs :: "[(a, [b])] -> (Data.Set.Internal.Set a) -> (Data.Map.Internal.Map a [b]) -> (Data.Map.Internal.Map a [b])"
103:13-103:31::lq_anf$##7205759403792806579 :: "{v : [(a, [b])] | len v == len rest##a2aJ + len newQueue##a2aQ}"
103:14-103:18::rest :: "{v : [(a, [b])] | v == rest##a2aJ\n                  && len v >= 0}"
103:22-103:30::newQueue :: "{v : [(a, [b])] | v == newQueue##a2aQ\n                  && v == successors##a2aN\n                  && len v >= 0}"
103:32-103:42::newVisited :: "{v : (Data.Set.Internal.Set a) | v == newVisited##a2aP}"
103:43-103:49::newMap :: "{v : (Data.Map.Internal.Map a [b]) | v == newMap##a2aO}"
105:9-105:11::mo :: "a b c"
105:14-105:17::_ :: "x1:(a b c, [c]) -> {v : a b c | v == fst x1}"
105:20-105:53::lq_anf$##7205759403792806564 :: "(a b c, [c])"
105:25-105:36::lq_anf$##7205759403792806562 :: "a b c"
105:32-105:35::aut :: "{v : a b c | v == aut##a2aD}"
105:37-105:53::lq_anf$##7205759403792806563 :: "{v : [a] | len v == len prefix##a2aI}"
105:46-105:52::prefix :: "{v : [a] | v == prefix##a2aI\n           && len v >= 0}"
106:9-106:19::successors :: "[(a, [b])]"
107:15-107:42::lq_anf$##7205759403792806572 :: "{v : (a, [b]) | fst v == nextState##a2aS\n                && x_Tuple21 v == nextState##a2aS}"
107:16-107:25::nextState :: "{VV : a | VV == nextState##a2aS}"
107:27-107:32::ds_d3kX :: "a"
107:35-107:41::prefix :: "{v : [a] | v == prefix##a2aI\n           && len v >= 0}"
108:24-108:32::alphabet :: "{v : [a] | v == alphabet##a2aE\n           && len v >= 0}"
109:19-109:28::nextState :: "a"
109:31-109:38::_ :: "forall a b . c a b -> d"
109:41-109:44::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : a | VV == fst x1} | VV == fst}"
109:47-109:60::lq_anf$##7205759403792806568 :: "(a b c, c)"
109:52-109:54::mo :: "{v : a b c | v == mo##a2aM}"
109:55-109:60::ds_d3kX :: "a"
110:15-110:24::nextState :: "{VV : a | VV == nextState##a2aS}"
110:41-110:48::ds_d3kE :: "(Data.Set.Internal.Set a)"
113:9-113:15::newMap :: "(Data.Map.Internal.Map a [b])"
113:18-113:59::_ :: "(Data.Map.Internal.Map a [b])"
113:24-113:44::lq_anf$##7205759403792806575 :: "(a, [b]) -> (Data.Map.Internal.Map a [b]) -> (Data.Map.Internal.Map a [b])"
113:33-113:43::lq_anf$##7205759403792806574 :: "a -> [b] -> (Data.Map.Internal.Map a [b]) -> (Data.Map.Internal.Map a [b])"
113:45-113:48::acc :: "{v : (Data.Map.Internal.Map a [b]) | v == acc##a2aH}"
113:49-113:59::successors :: "{v : [(a, [b])] | v == successors##a2aN\n                  && len v >= 0}"
114:9-114:19::newVisited :: "(Data.Set.Internal.Set a)"
114:22-114:65::_ :: "(Data.Set.Internal.Set a)"
114:28-114:46::lq_anf$##7205759403792806578 :: "(a, [b]) -> (Data.Set.Internal.Set a) -> (Data.Set.Internal.Set a)"
114:29-114:39::lq_anf$##7205759403792806576 :: "x1:a -> x2:(Data.Set.Internal.Set a) -> {v : (Data.Set.Internal.Set a) | v == Set_cup x2 (Set_sng x1)}"
114:42-114:45::_ :: "{VV : forall a b .\n      x1:(a, b) -> {VV : a | VV == fst x1} | VV == fst}"
114:47-114:54::ds_d3kE :: "(Data.Set.Internal.Set a)"
114:55-114:65::successors :: "{v : [(a, [b])] | v == successors##a2aN\n                  && len v >= 0}"
115:9-115:17::newQueue :: "{v : [(a, [b])] | v == successors##a2aN\n                  && len v >= 0}"
115:20-115:30::_ :: "{v : [(a, [b])] | v == successors##a2aN\n                  && len v >= 0}"
127:1-127:12::Haal.BlackBox.distinguish :: "forall a b c d .\n(Haal.BlackBox.Automaton<[]> a b, GHC.Classes.(%,%)<[]> (GHC.Classes.Ord c) ((GHC.Enum.Enum c), (GHC.Enum.Bounded c)), GHC.Classes.Ord<[]> b, GHC.Classes.Eq<[]> d) =>\na c d -> b -> b -> [c]"
127:13-127:14::m :: "a b c"
127:15-127:17::s1 :: "a"
127:18-127:20::s2 :: "a"
127:23-127:55::lq_anf$##7205759403792806521 :: "(Data.Map.Internal.Map (a, a) [b])"
127:31-127:40::_ :: "{VV : forall a b . (Data.Map.Internal.Map a b) | VV == empty}"
127:41-127:55::lq_anf$##7205759403792806525 :: "[(a, a, [b])]"
127:42-127:54::lq_anf$##7205759403792806523 :: "{v : (a, a, [b]) | x_Tuple31 v == s1##a2aU\n                   && x_Tuple32 v == s2##a2aV}"
127:43-127:45::s1 :: "{VV : a | VV == s1##a2aU}"
127:47-127:49::s2 :: "{VV : a | VV == s2##a2aV}"
127:51-127:53::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && len v == 0} | VV == []}"
129:5-129:13::alphabet :: "[a]"
129:16-129:37::_ :: "[a]"
129:27-129:37::lq_anf$##7205759403792806476 :: "(Data.Set.Internal.Set a)"
129:35-129:36::m :: "{v : a b c | v == m##a2aT}"
131:5-131:12::explore :: "(Data.Map.Internal.Map (a, a) [b]) -> [(a, a, [b])] -> [b]"
131:20-131:22::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && len v == 0} | VV == []}"
133:28-133:39::_ :: "{v : (GHC.Maybe.Maybe a) | v == discrepancy##a2bb}"
133:42-133:69::GHC.List.reverse :: "{VV : forall a .\n      x1:[a] -> {v : [a] | len v == len x1} | VV == reverse}"
133:50-133:69::lq_anf$##7205759403792806520 :: "{v : [a] | head v == seqFound##a2bj\n           && len v == 1 + len prefix##a2b2\n           && listElts v == Set_cup (Set_sng seqFound##a2bj) (listElts prefix##a2b2)\n           && tail v == prefix##a2b2}"
133:51-133:59::seqFound :: "{VV : a | VV == seqFound##a2bj}"
133:62-133:68::prefix :: "{v : [a] | v == prefix##a2b2\n           && len v >= 0}"
134:23-134:61::explore :: "(Data.Map.Internal.Map (a, a) [b]) -> [(a, a, [b])] -> [b]"
134:31-134:41::newVisited :: "{v : (Data.Map.Internal.Map (a, a) [b]) | v == newVisited##a2b4}"
134:42-134:61::lq_anf$##7205759403792806519 :: "{v : [(a, a, [b])] | len v == len queue##a2b3 + len newQueue##a2be}"
134:43-134:48::queue :: "{v : [(a, a, [b])] | v == queue##a2b3\n                     && len v >= 0}"
134:52-134:60::newQueue :: "{v : [(a, a, [b])] | v == newQueue##a2be\n                     && len v >= 0}"
136:9-136:19::newVisited :: "(Data.Map.Internal.Map (a, a) [b])"
136:22-136:56::_ :: "(Data.Map.Internal.Map (a, a) [b])"
136:33-136:41::lq_anf$##7205759403792806517 :: "{v : (a, a) | fst v == q1##a2b0\n              && snd v == q2##a2b1\n              && x_Tuple21 v == q1##a2b0\n              && x_Tuple22 v == q2##a2b1}"
136:34-136:36::q1 :: "{VV : a | VV == q1##a2b0}"
136:38-136:40::q2 :: "{VV : a | VV == q2##a2b1}"
136:42-136:48::prefix :: "{v : [a] | v == prefix##a2b2\n           && len v >= 0}"
136:49-136:56::ds_d3iX :: "(Data.Map.Internal.Map (a, a) [b])"
137:9-137:12::mo1 :: "a b c"
137:15-137:26::_ :: "a b c"
137:22-137:23::m :: "{v : a b c | v == m##a2aT}"
137:24-137:26::q1 :: "{VV : a | VV == q1##a2b0}"
138:9-138:12::mo2 :: "a b c"
138:15-138:26::_ :: "a b c"
138:22-138:23::m :: "{v : a b c | v == m##a2aT}"
138:24-138:26::q2 :: "{VV : a | VV == q2##a2b1}"
140:10-140:21::nextStates1 :: "[a]"
140:23-140:31::outputs1 :: "[a]"
140:35-140:40::_ :: "[(a, b)] -> ([a], [b])"
140:43-140:76::lq_anf$##7205759403792806483 :: "{v : [(a, b)] | len v == len alphabet##a2aW}"
140:47-140:67::lq_anf$##7205759403792806482 :: "a -> (b, c)"
140:63-140:66::mo1 :: "{v : a b c | v == mo1##a2b5}"
140:68-140:76::alphabet :: "{v : [a] | v == alphabet##a2aW\n           && len v >= 0}"
141:10-141:21::nextStates2 :: "[a]"
141:23-141:31::outputs2 :: "[a]"
141:35-141:40::_ :: "[(a, b)] -> ([a], [b])"
141:43-141:76::lq_anf$##7205759403792806481 :: "{v : [(a, b)] | len v == len alphabet##a2aW}"
141:47-141:67::lq_anf$##7205759403792806480 :: "a -> (b, c)"
141:63-141:66::mo2 :: "{v : a b c | v == mo2##a2b6}"
141:68-141:76::alphabet :: "{v : [a] | v == alphabet##a2aW\n           && len v >= 0}"
143:9-143:20::discrepancy :: "(GHC.Maybe.Maybe a)"
143:23-143:76::_ :: "(GHC.Maybe.Maybe GHC.Types.Int)"
143:38-143:43::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
143:44-143:76::lq_anf$##7205759403792806504 :: "{v : [GHC.Types.Bool] | len v <= len outputs1##a2s0\n                        && len v <= len outputs2##a2rh}"
143:53-143:57::lq_anf$##7205759403792806503 :: "x1:a -> x2:a -> {v : GHC.Types.Bool | v <=> x1 == x2}"
143:58-143:66::outputs1 :: "{v : [a] | v == outputs1##a2s0\n           && len v >= 0}"
143:67-143:75::outputs2 :: "{v : [a] | v == outputs2##a2rh\n           && len v >= 0}"
143:81-143:111::GHC.Maybe.Just :: "{VV : forall a .\n      x1:a -> {v : (GHC.Maybe.Maybe a) | lqdc##$select##GHC.Maybe.Just##1 v == x1} | VV == Just}"
143:82-143:85::idx :: "GHC.Types.Int"
143:94-143:111::lq_anf$##7205759403792806505 :: "a"
143:95-143:103::alphabet :: "{v : [a] | v == alphabet##a2aW\n           && len v >= 0}"
143:107-143:110::idx :: "{v : GHC.Types.Int | v == idx##a2bf}"
145:9-145:17::appended :: "{v : [[a]] | len v == len alphabet##a2aW}"
145:20-145:43::_ :: "{v : [[a]] | len v == len alphabet##a2aW}"
145:24-145:34::lq_anf$##7205759403792806479 :: "v_B2:a -> {v : [a] | head v == v_B2\n                     && len v == 1 + len prefix##a2b2\n                     && listElts v == Set_cup (Set_sng v_B2) (listElts prefix##a2b2)\n                     && tail v == prefix##a2b2}"
145:25-145:26::_ :: "[a]"
145:27-145:33::prefix :: "{v : [a] | v == prefix##a2b2\n           && len v >= 0}"
145:35-145:43::alphabet :: "{v : [a] | v == alphabet##a2aW\n           && len v >= 0}"
147:9-147:20::toBeVisited :: "(Data.Map.Internal.Map (a, a) [b])"
147:23-147:35::_ :: "[((a, a), [b])] -> (Data.Map.Internal.Map (a, a) [b])"
147:38-147:80::lq_anf$##7205759403792806507 :: "{v : [((a, a), [b])] | len v <= len appended##a2bc}"
147:42-147:71::lq_anf$##7205759403792806506 :: "{v : [(a, a)] | (len nextStates1##a2rZ == len nextStates2##a2rg => len v == len nextStates1##a2rZ)\n                && len v <= len nextStates1##a2rZ\n                && len v <= len nextStates2##a2rg}"
147:47-147:58::nextStates1 :: "{v : [a] | v == nextStates1##a2rZ\n           && len v >= 0}"
147:59-147:70::nextStates2 :: "{v : [a] | v == nextStates2##a2rg\n           && len v >= 0}"
147:72-147:80::appended :: "{v : [[a]] | v == appended##a2bc\n             && len v == len alphabet##a2aW\n             && len v >= 0}"
149:9-149:17::newQueue :: "[(a, a, [b])]"
149:20-149:115::lq_anf$##7205759403792806515 :: "[(a, a, [b])]"
149:21-149:34::lq_anf$##7205759403792806514 :: "{v : (a, a, [b]) | x_Tuple31 v == s1'##a2bg\n                   && x_Tuple32 v == s2'##a2bh\n                   && x_Tuple33 v == p##a2bi}"
149:22-149:25::s1' :: "{VV : a | VV == s1'##a2bg}"
149:27-149:30::s2' :: "{VV : a | VV == s2'##a2bh}"
149:32-149:33::p :: "{v : [a] | v == p##a2bi\n           && len v >= 0}"
149:56-149:78::lq_anf$##7205759403792806516 :: "[((a, a), [b])]"
149:67-149:78::toBeVisited :: "{v : (Data.Map.Internal.Map (a, a) [b]) | v == toBeVisited##a2bd}"
149:80-149:90::lq_anf$##7205759403792806511 :: "{v : (a, a) | fst v == s1'##a2bg\n              && snd v == s2'##a2bh\n              && x_Tuple21 v == s1'##a2bg\n              && x_Tuple22 v == s2'##a2bh}"
149:81-149:84::s1' :: "{VV : a | VV == s1'##a2bg}"
149:86-149:89::s2' :: "{VV : a | VV == s2'##a2bh}"
149:107-149:114::ds_d3iX :: "(Data.Map.Internal.Map (a, a) [b])"
151:5-151:19::stepAndCurrent :: "forall a b c d .\n(Haal.BlackBox.Automaton<[]> a b) =>\na c d -> c -> (b, d)"
151:20-151:22::mo :: "a b c"
151:23-151:24::i :: "a"
151:27-151:56::lq_anf$##7205759403792806474 :: "a b c -> d"
151:37-151:44::_ :: "forall a b . c a b -> d"
151:45-151:56::lq_anf$##7205759403792806475 :: "(a b c, c)"
151:51-151:53::mo :: "{v : a b c | v == mo##a2bk}"
151:54-151:55::i :: "{VV : a | VV == i##a2bl}"
165:1-165:23::Haal.BlackBox.localCharacterizingSet :: "forall a b c d .\n(Haal.BlackBox.Automaton<[]> a b, GHC.Classes.(%,%)<[]> (GHC.Classes.Ord c) ((GHC.Enum.Enum c), (GHC.Enum.Bounded c)), GHC.Classes.(%,%)<[]> (GHC.Classes.Ord b) ((GHC.Enum.Enum b), (GHC.Enum.Bounded b)), GHC.Classes.Eq<[]> d) =>\na c d -> b -> (Data.Set.Internal.Set [c])"
165:24-165:25::m :: "a b c"
165:26-165:27::s :: "a"
165:30-165:90::$dOrd_a2vT :: "{v : (GHC.Classes.Ord [a]) | v == $dOrd_a2vT}"
165:43-165:90::lq_anf$##7205759403792806533 :: "[[a]]"
165:44-165:50::lq_anf$##7205759403792806529 :: "[a]"
165:46-165:47::s :: "{VV : a | VV == s##a2bn}"
165:48-165:50::ds_d3jW :: "a"
165:59-165:69::_ :: "x1:(Data.Set.Internal.Set a) -> {v : [a] | x1 == listElts v}"
165:72-165:80::lq_anf$##7205759403792806531 :: "(Data.Set.Internal.Set a)"
165:79-165:80::m :: "{v : a b c | v == m##a2bm}"
165:82-165:83::s :: "{VV : a | VV == s##a2bn}"
165:87-165:89::ds_d3jW :: "a"
167:5-167:6::d :: "a -> a -> [b]"
167:9-167:22::_ :: "a -> a -> [b]"
167:21-167:22::m :: "{v : a b c | v == m##a2bm}"
180:1-180:24::Haal.BlackBox.globalCharacterizingSet :: "forall a b c d .\n(Haal.BlackBox.Automaton<[]> a b, GHC.Classes.(%,%)<[]> (GHC.Classes.Ord c) ((GHC.Enum.Enum c), (GHC.Enum.Bounded c)), GHC.Classes.(%,%)<[]> (GHC.Classes.Ord b) ((GHC.Enum.Enum b), (GHC.Enum.Bounded b)), GHC.Classes.Eq<[]> d) =>\na c d -> (Data.Set.Internal.Set [c])"
180:25-180:26::m :: "a b c"
180:29-180:83::$dOrd_a2xl :: "{v : (GHC.Classes.Ord [a]) | v == $dOrd_a2xl}"
180:42-180:83::lq_anf$##7205759403792806541 :: "[[a]]"
180:43-180:50::lq_anf$##7205759403792806539 :: "[a]"
180:45-180:47::ds_d3ki :: "a"
180:48-180:50::ds_d3km :: "a"
180:59-180:62::sts :: "{v : [a] | v == sts##a2br\n           && len v >= 0}"
180:70-180:73::sts :: "{v : [a] | v == sts##a2br\n           && len v >= 0}"
180:75-180:77::ds_d3ki :: "a"
180:80-180:82::ds_d3km :: "a"
182:5-182:8::sts :: "[a]"
182:11-182:21::_ :: "x1:(Data.Set.Internal.Set a) -> {v : [a] | x1 == listElts v}"
182:24-182:32::lq_anf$##7205759403792806534 :: "(Data.Set.Internal.Set a)"
182:31-182:32::m :: "{v : a b c | v == m##a2bq}"
183:5-183:6::d :: "a -> a -> [b]"
183:9-183:22::_ :: "a -> a -> [b]"
183:21-183:22::m :: "{v : a b c | v == m##a2bq}"
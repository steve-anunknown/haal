(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun document.documentElement () Int)
(declare-fun lit$36$36$36$undefined () Str)
(declare-fun lit$36$36$36$NaN () Str)
(declare-fun console () Int)
(declare-fun Event.AT_TARGET () Int)
(declare-fun Event.CAPTURING_PHASE () Int)
(declare-fun numeric_positive_infinity () Int)
(declare-fun numeric_negative_infinity () Int)
(declare-fun window () Int)
(declare-fun lit$36$36$36$StringConstructor () Str)
(declare-fun lit$36$36$36$LN2 () Str)
(declare-fun lit$36$36$36$BUBBLING_PHASE () Str)
(declare-fun Number.NaN () Int)
(declare-fun len () Int)
(declare-fun lit$36$36$36$Document () Str)
(declare-fun lit$36$36$36$Array () Str)
(declare-fun cast_as () Int)
(declare-fun lit$36$36$36$E () Str)
(declare-fun lit$36$36$36$SQRT1_2 () Str)
(declare-fun numeric_max_value () Int)
(declare-fun Number.NEGATIVE_INFINITY () Int)
(declare-fun numeric_nan () Int)
(declare-fun hasProperty () Int)
(declare-fun b_SSA_1 () (_ BitVec 32))
(declare-fun Math.LN10 () Int)
(declare-fun String () Int)
(declare-fun lq_tmp_nano_1 () (_ BitVec 32))
(declare-fun Math.LOG2E () Int)
(declare-fun Math.PI () Int)
(declare-fun offset () Int)
(declare-fun lit$36$36$36$documentElement () Str)
(declare-fun Number.prototype () Int)
(declare-fun lq_tmp_nano_3 () (_ BitVec 32))
(declare-fun lit$36$36$36$number () Str)
(declare-fun Object () Int)
(declare-fun key$NaN () Int)
(declare-fun numeric_min_value () Int)
(declare-fun lit$36$36$36$Event () Str)
(declare-fun lit$36$36$36$prototype () Str)
(declare-fun a_SSA_0 () (_ BitVec 32))
(declare-fun lit$36$36$36$AT_TARGET () Str)
(declare-fun lit$36$36$36$Error () Str)
(declare-fun Console.prototype () Int)
(declare-fun Error () Int)
(declare-fun lit$36$36$36$POSITIVE_INFINITY () Str)
(declare-fun lit$36$36$36$PI () Str)
(declare-fun Math () Int)
(declare-fun enumProp () Int)
(declare-fun Array.prototype () Int)
(declare-fun lit$36$36$36$LOG2E () Str)
(declare-fun Function.prototype () Int)
(declare-fun lit$36$36$36$Math () Str)
(declare-fun Number.MAX_VALUE () Int)
(declare-fun lit$36$36$36$Object () Str)
(declare-fun lit$36$36$36$MIN_VALUE () Str)
(declare-fun Math.SQRT1_2 () Int)
(declare-fun lit$36$36$36$SQRT2 () Str)
(declare-fun Math.LOG10E () Int)
(declare-fun lit$36$36$36$NEGATIVE_INFINITY () Str)
(declare-fun ttag () Int)
(declare-fun extends_interface () Int)
(declare-fun Math.E () Int)
(declare-fun Object.prototype () Int)
(declare-fun lit$36$36$36$Number () Str)
(declare-fun lit$36$36$36$LOG10E () Str)
(declare-fun Function () Int)
(declare-fun Error.prototype () Int)
(declare-fun VV$35$$35$2 () Int)
(declare-fun lq_tmp_nano_2 () (_ BitVec 32))
(declare-fun Prop () Int)
(declare-fun Event () Int)
(declare-fun Event.BUBBLING_PHASE () Int)
(declare-fun lit$36$36$36$String () Str)
(declare-fun hasDirectProperty () Int)
(declare-fun String.prototype () Int)
(declare-fun lit$36$36$36$CAPTURING_PHASE () Str)
(declare-fun VV$35$$35$1 () Int)
(declare-fun lit$36$36$36$Console () Str)
(declare-fun lit$36$36$36$Window () Str)
(declare-fun lit$36$36$36$MAX_VALUE () Str)
(declare-fun Console () Int)
(declare-fun Math.SQRT2 () Int)
(declare-fun Number.POSITIVE_INFINITY () Int)
(declare-fun document () Int)
(declare-fun Array () Int)
(declare-fun lit$36$36$36$LN10 () Str)
(declare-fun Number () Int)
(declare-fun extends_class () Int)
(declare-fun undefined () Int)
(declare-fun lit$36$36$36$boolean () Str)
(declare-fun lit$36$36$36$HTMLElement () Str)
(declare-fun Number.MIN_VALUE () Int)
(declare-fun cast_as_int () Int)
(declare-fun lit$36$36$36$Function () Str)
(declare-fun lit$36$36$36$object () Str)
(declare-fun lq_tmp_nano_6 () Int)
(declare-fun Math.LN2 () Int)
(declare-fun Event.prototype () Int)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$16 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$32 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$10 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$21 (Int (Array Int Bool)) (Array Int Bool))
(declare-fun apply$35$$35$27 (Int (_ BitVec 32)) (Array Int Bool))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$25 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$31 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$34 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$20 (Int (Array Int Bool)) Str)
(declare-fun apply$35$$35$11 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$33 (Int (_ BitVec 64)) (Array Int Bool))
(declare-fun apply$35$$35$30 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$28 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int (Array Int Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$26 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$17 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$15 (Int Str) (Array Int Bool))
(declare-fun apply$35$$35$18 (Int (Array Int Bool)) Int)
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$9 (Int Bool) (Array Int Bool))
(declare-fun apply$35$$35$3 (Int Int) (Array Int Bool))
(declare-fun apply$35$$35$29 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$22 (Int (Array Int Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$35 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$19 (Int (Array Int Bool)) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$16 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$32 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$10 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$21 ((Array Int Bool)) (Array Int Bool))
(declare-fun coerce$35$$35$27 ((_ BitVec 32)) (Array Int Bool))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$25 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$31 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$34 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$20 ((Array Int Bool)) Str)
(declare-fun coerce$35$$35$11 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$33 ((_ BitVec 64)) (Array Int Bool))
(declare-fun coerce$35$$35$30 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$28 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$23 ((Array Int Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$26 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$17 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$15 (Str) (Array Int Bool))
(declare-fun coerce$35$$35$18 ((Array Int Bool)) Int)
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$9 (Bool) (Array Int Bool))
(declare-fun coerce$35$$35$3 (Int) (Array Int Bool))
(declare-fun coerce$35$$35$29 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$22 ((Array Int Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$35 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$19 ((Array Int Bool)) Bool)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$16 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$32 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$21 ((Array Int Bool) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$27 ((_ BitVec 32) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$25 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$31 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$34 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$20 ((Array Int Bool) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$33 ((_ BitVec 64) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$30 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$28 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 ((Array Int Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$26 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$17 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$15 (Str (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$18 ((Array Int Bool) Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$29 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$22 ((Array Int Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$35 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$19 ((Array Int Bool) Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(push 1)
(define-fun b$36$$35$$35$0 () Bool (and (not (apply$35$$35$1 (as Prop Int) undefined)) (= (apply$35$$35$2 (as ttag Int) undefined) lit$36$36$36$undefined)))
(define-fun b$36$$35$$35$32 () Bool (and (= (apply$35$$35$1 (as Prop Int) Event.CAPTURING_PHASE) (not (= Event.CAPTURING_PHASE 0))) (= (apply$35$$35$2 (as ttag Int) Event.CAPTURING_PHASE) lit$36$36$36$number) (= Event.CAPTURING_PHASE (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Event) lit$36$36$36$CAPTURING_PHASE))))
(define-fun b$36$$35$$35$1 () Bool (and (apply$35$$35$1 (as Prop Int) Object) (= (apply$35$$35$2 (as ttag Int) Object) lit$36$36$36$object)))
(define-fun b$36$$35$$35$33 () Bool (and (= (apply$35$$35$1 (as Prop Int) Event.AT_TARGET) (not (= Event.AT_TARGET 0))) (= (apply$35$$35$2 (as ttag Int) Event.AT_TARGET) lit$36$36$36$number) (= Event.AT_TARGET (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Event) lit$36$36$36$AT_TARGET))))
(define-fun b$36$$35$$35$2 () Bool (and (apply$35$$35$1 (as Prop Int) Object.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Object.prototype) lit$36$36$36$Object) (= (apply$35$$35$2 (as ttag Int) Object.prototype) lit$36$36$36$object) (= Object.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Object) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$34 () Bool (and (apply$35$$35$1 (as Prop Int) Event.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Event.prototype) lit$36$36$36$Event) (= (apply$35$$35$2 (as ttag Int) Event.prototype) lit$36$36$36$object) (= Event.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Event) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$3 () Bool (and (= (apply$35$$35$1 (as Prop Int) key$NaN) (not (= key$NaN 0))) (= key$NaN numeric_nan) (= (apply$35$$35$2 (as ttag Int) key$NaN) lit$36$36$36$number)))
(define-fun b$36$$35$$35$35 () Bool (and (= (apply$35$$35$1 (as Prop Int) Event.BUBBLING_PHASE) (not (= Event.BUBBLING_PHASE 0))) (= (apply$35$$35$2 (as ttag Int) Event.BUBBLING_PHASE) lit$36$36$36$number) (= Event.BUBBLING_PHASE (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Event) lit$36$36$36$BUBBLING_PHASE))))
(define-fun b$36$$35$$35$4 () Bool (and (apply$35$$35$1 (as Prop Int) Number) (= (apply$35$$35$2 (as ttag Int) Number) lit$36$36$36$object)))
(define-fun b$36$$35$$35$36 () Bool (and (apply$35$$35$1 (as Prop Int) document) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) document) lit$36$36$36$Document) (= (apply$35$$35$2 (as ttag Int) document) lit$36$36$36$object)))
(define-fun b$36$$35$$35$5 () Bool (and (= (apply$35$$35$1 (as Prop Int) Number.POSITIVE_INFINITY) (not (= Number.POSITIVE_INFINITY 0))) (= (apply$35$$35$2 (as ttag Int) Number.POSITIVE_INFINITY) lit$36$36$36$number) (= Number.POSITIVE_INFINITY (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Number) lit$36$36$36$POSITIVE_INFINITY))))
(define-fun b$36$$35$$35$37 () Bool (and (apply$35$$35$1 (as Prop Int) document.documentElement) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) document.documentElement) lit$36$36$36$HTMLElement) (= (apply$35$$35$2 (as ttag Int) document.documentElement) lit$36$36$36$object) (= document.documentElement (apply$35$$35$12 (apply$35$$35$0 (as offset Int) document) lit$36$36$36$documentElement))))
(define-fun b$36$$35$$35$6 () Bool (and (= (apply$35$$35$1 (as Prop Int) Number.MIN_VALUE) (not (= Number.MIN_VALUE 0))) (= (apply$35$$35$2 (as ttag Int) Number.MIN_VALUE) lit$36$36$36$number) (= Number.MIN_VALUE (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Number) lit$36$36$36$MIN_VALUE))))
(define-fun b$36$$35$$35$38 () Bool (and (apply$35$$35$1 (as Prop Int) window) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) window) lit$36$36$36$Window) (= (apply$35$$35$2 (as ttag Int) window) lit$36$36$36$object)))
(define-fun b$36$$35$$35$7 () Bool (and (apply$35$$35$1 (as Prop Int) Number.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Number.prototype) lit$36$36$36$Number) (= (apply$35$$35$2 (as ttag Int) Number.prototype) lit$36$36$36$object) (= Number.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Number) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$39 () Bool (= lq_tmp_nano_1 #x00000008))
(define-fun b$36$$35$$35$8 () Bool (and (= (apply$35$$35$1 (as Prop Int) Number.NaN) (not (= Number.NaN 0))) (= (apply$35$$35$2 (as ttag Int) Number.NaN) lit$36$36$36$number) (= Number.NaN (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Number) lit$36$36$36$NaN))))
(define-fun b$36$$35$$35$40 () Bool (and (= a_SSA_0 #x00000008) (= a_SSA_0 lq_tmp_nano_1)))
(define-fun b$36$$35$$35$9 () Bool (and (= (apply$35$$35$1 (as Prop Int) Number.NEGATIVE_INFINITY) (not (= Number.NEGATIVE_INFINITY 0))) (= (apply$35$$35$2 (as ttag Int) Number.NEGATIVE_INFINITY) lit$36$36$36$number) (= Number.NEGATIVE_INFINITY (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Number) lit$36$36$36$NEGATIVE_INFINITY))))
(define-fun b$36$$35$$35$41 () Bool (= lq_tmp_nano_2 #x00000008))
(define-fun b$36$$35$$35$10 () Bool (and (= (apply$35$$35$1 (as Prop Int) Number.MAX_VALUE) (not (= Number.MAX_VALUE 0))) (= (apply$35$$35$2 (as ttag Int) Number.MAX_VALUE) lit$36$36$36$number) (= Number.MAX_VALUE (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Number) lit$36$36$36$MAX_VALUE))))
(define-fun b$36$$35$$35$42 () Bool (and (= b_SSA_1 #x00000008) (= b_SSA_1 lq_tmp_nano_2)))
(define-fun b$36$$35$$35$11 () Bool (and (apply$35$$35$1 (as Prop Int) Math) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Math) lit$36$36$36$Math) (= (apply$35$$35$2 (as ttag Int) Math) lit$36$36$36$object)))
(define-fun b$36$$35$$35$43 () Bool (= lq_tmp_nano_3 (bvor a_SSA_0 a_SSA_0)))
(define-fun b$36$$35$$35$12 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.SQRT2) (not (= Math.SQRT2 0))) (= (apply$35$$35$2 (as ttag Int) Math.SQRT2) lit$36$36$36$number) (= Math.SQRT2 (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$SQRT2))))
(define-fun b$36$$35$$35$44 () Bool (and (= (apply$35$$35$1 (as Prop Int) lq_tmp_nano_6) (= b_SSA_1 lq_tmp_nano_3)) (= (apply$35$$35$2 (as ttag Int) lq_tmp_nano_6) lit$36$36$36$boolean)))
(define-fun b$36$$35$$35$13 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.LN2) (not (= Math.LN2 0))) (= (apply$35$$35$2 (as ttag Int) Math.LN2) lit$36$36$36$number) (= Math.LN2 (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$LN2))))
(define-fun b$36$$35$$35$14 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.PI) (not (= Math.PI 0))) (= (apply$35$$35$2 (as ttag Int) Math.PI) lit$36$36$36$number) (= Math.PI (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$PI))))
(define-fun b$36$$35$$35$46 () Bool (and (= (apply$35$$35$1 (as Prop Int) VV$35$$35$1) (= b_SSA_1 lq_tmp_nano_3)) (= (apply$35$$35$2 (as ttag Int) VV$35$$35$1) lit$36$36$36$boolean) (= VV$35$$35$1 lq_tmp_nano_6)))
(define-fun b$36$$35$$35$15 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.LOG10E) (not (= Math.LOG10E 0))) (= (apply$35$$35$2 (as ttag Int) Math.LOG10E) lit$36$36$36$number) (= Math.LOG10E (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$LOG10E))))
(define-fun b$36$$35$$35$47 () Bool (and (= (apply$35$$35$1 (as Prop Int) VV$35$$35$2) (= b_SSA_1 lq_tmp_nano_3)) (= (apply$35$$35$2 (as ttag Int) VV$35$$35$2) lit$36$36$36$boolean) (= VV$35$$35$2 lq_tmp_nano_6)))
(define-fun b$36$$35$$35$16 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.LOG2E) (not (= Math.LOG2E 0))) (= (apply$35$$35$2 (as ttag Int) Math.LOG2E) lit$36$36$36$number) (= Math.LOG2E (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$LOG2E))))
(define-fun b$36$$35$$35$17 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.E) (not (= Math.E 0))) (= (apply$35$$35$2 (as ttag Int) Math.E) lit$36$36$36$number) (= Math.E (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$E))))
(define-fun b$36$$35$$35$18 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.SQRT1_2) (not (= Math.SQRT1_2 0))) (= (apply$35$$35$2 (as ttag Int) Math.SQRT1_2) lit$36$36$36$number) (= Math.SQRT1_2 (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$SQRT1_2))))
(define-fun b$36$$35$$35$19 () Bool (and (= (apply$35$$35$1 (as Prop Int) Math.LN10) (not (= Math.LN10 0))) (= (apply$35$$35$2 (as ttag Int) Math.LN10) lit$36$36$36$number) (= Math.LN10 (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Math) lit$36$36$36$LN10))))
(define-fun b$36$$35$$35$20 () Bool (and (apply$35$$35$1 (as Prop Int) String) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) String) lit$36$36$36$StringConstructor) (= (apply$35$$35$2 (as ttag Int) String) lit$36$36$36$object)))
(define-fun b$36$$35$$35$21 () Bool (and (apply$35$$35$1 (as Prop Int) String.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) String.prototype) lit$36$36$36$String) (= (apply$35$$35$2 (as ttag Int) String.prototype) lit$36$36$36$object) (= String.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) String) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$22 () Bool (and (apply$35$$35$1 (as Prop Int) Array) (= (apply$35$$35$2 (as ttag Int) Array) lit$36$36$36$object)))
(define-fun b$36$$35$$35$23 () Bool (and (apply$35$$35$1 (as Prop Int) Array.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Array.prototype) lit$36$36$36$Array) (= (apply$35$$35$2 (as ttag Int) Array.prototype) lit$36$36$36$object) (= Array.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Array) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$24 () Bool (and (apply$35$$35$1 (as Prop Int) Function) (= (apply$35$$35$2 (as ttag Int) Function) lit$36$36$36$object)))
(define-fun b$36$$35$$35$25 () Bool (and (apply$35$$35$1 (as Prop Int) Function.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Function.prototype) lit$36$36$36$Function) (= (apply$35$$35$2 (as ttag Int) Function.prototype) lit$36$36$36$object) (= Function.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Function) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$26 () Bool (and (apply$35$$35$1 (as Prop Int) Console) (= (apply$35$$35$2 (as ttag Int) Console) lit$36$36$36$object)))
(define-fun b$36$$35$$35$27 () Bool (and (apply$35$$35$1 (as Prop Int) Console.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Console.prototype) lit$36$36$36$Console) (= (apply$35$$35$2 (as ttag Int) Console.prototype) lit$36$36$36$object) (= Console.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Console) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$28 () Bool (and (apply$35$$35$1 (as Prop Int) console) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) console) lit$36$36$36$Console) (= (apply$35$$35$2 (as ttag Int) console) lit$36$36$36$object)))
(define-fun b$36$$35$$35$29 () Bool (and (apply$35$$35$1 (as Prop Int) Error) (= (apply$35$$35$2 (as ttag Int) Error) lit$36$36$36$object)))
(define-fun b$36$$35$$35$30 () Bool (and (apply$35$$35$1 (as Prop Int) Error.prototype) (apply$35$$35$13 (apply$35$$35$0 (as extends_interface Int) Error.prototype) lit$36$36$36$Error) (= (apply$35$$35$2 (as ttag Int) Error.prototype) lit$36$36$36$object) (= Error.prototype (apply$35$$35$12 (apply$35$$35$0 (as offset Int) Error) lit$36$36$36$prototype))))
(define-fun b$36$$35$$35$31 () Bool (and (apply$35$$35$1 (as Prop Int) Event) (= (apply$35$$35$2 (as ttag Int) Event) lit$36$36$36$object)))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$0 b$36$$35$$35$32 b$36$$35$$35$1 b$36$$35$$35$33 b$36$$35$$35$2 b$36$$35$$35$34 b$36$$35$$35$3 b$36$$35$$35$35 b$36$$35$$35$4 b$36$$35$$35$36 b$36$$35$$35$5 b$36$$35$$35$37 b$36$$35$$35$6 b$36$$35$$35$38 b$36$$35$$35$7 b$36$$35$$35$39 b$36$$35$$35$8 b$36$$35$$35$40 b$36$$35$$35$9 b$36$$35$$35$41 b$36$$35$$35$10 b$36$$35$$35$42 b$36$$35$$35$11 b$36$$35$$35$43 b$36$$35$$35$12 b$36$$35$$35$44 b$36$$35$$35$13 b$36$$35$$35$14 b$36$$35$$35$46 b$36$$35$$35$15 b$36$$35$$35$16 b$36$$35$$35$17 b$36$$35$$35$18 b$36$$35$$35$19 b$36$$35$$35$20 b$36$$35$$35$21 b$36$$35$$35$22 b$36$$35$$35$23 b$36$$35$$35$24 b$36$$35$$35$25 b$36$$35$$35$26 b$36$$35$$35$27 b$36$$35$$35$28 b$36$$35$$35$29 b$36$$35$$35$30 b$36$$35$$35$31))
(push 1)
(assert (not (apply$35$$35$1 (as Prop Int) VV$35$$35$1)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$0 b$36$$35$$35$32 b$36$$35$$35$1 b$36$$35$$35$33 b$36$$35$$35$2 b$36$$35$$35$34 b$36$$35$$35$3 b$36$$35$$35$35 b$36$$35$$35$4 b$36$$35$$35$36 b$36$$35$$35$5 b$36$$35$$35$37 b$36$$35$$35$6 b$36$$35$$35$38 b$36$$35$$35$7 b$36$$35$$35$39 b$36$$35$$35$8 b$36$$35$$35$40 b$36$$35$$35$9 b$36$$35$$35$41 b$36$$35$$35$10 b$36$$35$$35$42 b$36$$35$$35$11 b$36$$35$$35$43 b$36$$35$$35$12 b$36$$35$$35$44 b$36$$35$$35$13 b$36$$35$$35$14 b$36$$35$$35$15 b$36$$35$$35$47 b$36$$35$$35$16 b$36$$35$$35$17 b$36$$35$$35$18 b$36$$35$$35$19 b$36$$35$$35$20 b$36$$35$$35$21 b$36$$35$$35$22 b$36$$35$$35$23 b$36$$35$$35$24 b$36$$35$$35$25 b$36$$35$$35$26 b$36$$35$$35$27 b$36$$35$$35$28 b$36$$35$$35$29 b$36$$35$$35$30 b$36$$35$$35$31))
(push 1)
(assert (not (apply$35$$35$1 (as Prop Int) VV$35$$35$2)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(pop 1)

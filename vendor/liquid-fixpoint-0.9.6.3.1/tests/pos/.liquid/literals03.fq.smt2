(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun cast_as () Int)
(declare-fun lit$36$star () Str)
(declare-fun lit$36$director () Str)
(declare-fun listElts () Int)
(declare-fun things () Int)
(declare-fun lit$36$title () Str)
(declare-fun VV$35$$35$1 () Int)
(declare-fun lit$36$year () Str)
(declare-fun cast_as_int () Int)
(declare-fun a () Str)
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$39 (Int (_ BitVec 32)) (Array Str Bool))
(declare-fun apply$35$$35$19 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$44 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$11 (Int Bool) (Array Str Bool))
(declare-fun apply$35$$35$12 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$9 (Int Bool) Str)
(declare-fun apply$35$$35$16 (Int Str) Str)
(declare-fun apply$35$$35$30 (Int (Array Str Bool)) Str)
(declare-fun apply$35$$35$24 (Int (Array Int Bool)) (Array Int Bool))
(declare-fun apply$35$$35$38 (Int (_ BitVec 32)) (Array Int Bool))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$36 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$43 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$47 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$28 (Int (Array Str Bool)) Int)
(declare-fun apply$35$$35$29 (Int (Array Str Bool)) Bool)
(declare-fun apply$35$$35$15 (Int Str) Bool)
(declare-fun apply$35$$35$23 (Int (Array Int Bool)) Str)
(declare-fun apply$35$$35$13 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$6 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$34 (Int (Array Str Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$45 (Int (_ BitVec 64)) (Array Int Bool))
(declare-fun apply$35$$35$42 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$35 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$40 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$27 (Int (Array Int Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$37 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$14 (Int Str) Int)
(declare-fun apply$35$$35$8 (Int Bool) Bool)
(declare-fun apply$35$$35$32 (Int (Array Str Bool)) (Array Str Bool))
(declare-fun apply$35$$35$20 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$18 (Int Str) (Array Str Bool))
(declare-fun apply$35$$35$17 (Int Str) (Array Int Bool))
(declare-fun apply$35$$35$46 (Int (_ BitVec 64)) (Array Str Bool))
(declare-fun apply$35$$35$21 (Int (Array Int Bool)) Int)
(declare-fun apply$35$$35$7 (Int Bool) Int)
(declare-fun apply$35$$35$10 (Int Bool) (Array Int Bool))
(declare-fun apply$35$$35$3 (Int Int) (Array Int Bool))
(declare-fun apply$35$$35$25 (Int (Array Int Bool)) (Array Str Bool))
(declare-fun apply$35$$35$41 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$33 (Int (Array Str Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$26 (Int (Array Int Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Int) (Array Str Bool))
(declare-fun apply$35$$35$48 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$22 (Int (Array Int Bool)) Bool)
(declare-fun apply$35$$35$31 (Int (Array Str Bool)) (Array Int Bool))
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$39 ((_ BitVec 32)) (Array Str Bool))
(declare-fun coerce$35$$35$19 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$44 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$11 (Bool) (Array Str Bool))
(declare-fun coerce$35$$35$12 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$9 (Bool) Str)
(declare-fun coerce$35$$35$16 (Str) Str)
(declare-fun coerce$35$$35$30 ((Array Str Bool)) Str)
(declare-fun coerce$35$$35$24 ((Array Int Bool)) (Array Int Bool))
(declare-fun coerce$35$$35$38 ((_ BitVec 32)) (Array Int Bool))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$36 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$43 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$47 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$28 ((Array Str Bool)) Int)
(declare-fun coerce$35$$35$29 ((Array Str Bool)) Bool)
(declare-fun coerce$35$$35$15 (Str) Bool)
(declare-fun coerce$35$$35$23 ((Array Int Bool)) Str)
(declare-fun coerce$35$$35$13 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$6 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$34 ((Array Str Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$45 ((_ BitVec 64)) (Array Int Bool))
(declare-fun coerce$35$$35$42 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$35 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$40 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$27 ((Array Int Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$37 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$14 (Str) Int)
(declare-fun coerce$35$$35$8 (Bool) Bool)
(declare-fun coerce$35$$35$32 ((Array Str Bool)) (Array Str Bool))
(declare-fun coerce$35$$35$20 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$18 (Str) (Array Str Bool))
(declare-fun coerce$35$$35$17 (Str) (Array Int Bool))
(declare-fun coerce$35$$35$46 ((_ BitVec 64)) (Array Str Bool))
(declare-fun coerce$35$$35$21 ((Array Int Bool)) Int)
(declare-fun coerce$35$$35$7 (Bool) Int)
(declare-fun coerce$35$$35$10 (Bool) (Array Int Bool))
(declare-fun coerce$35$$35$3 (Int) (Array Int Bool))
(declare-fun coerce$35$$35$25 ((Array Int Bool)) (Array Str Bool))
(declare-fun coerce$35$$35$41 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$33 ((Array Str Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$26 ((Array Int Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Int) (Array Str Bool))
(declare-fun coerce$35$$35$48 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$22 ((Array Int Bool)) Bool)
(declare-fun coerce$35$$35$31 ((Array Str Bool)) (Array Int Bool))
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$39 ((_ BitVec 32) (Array Str Bool)) Int)
(declare-fun smt_lambda$35$$35$19 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$44 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (Array Str Bool)) Int)
(declare-fun smt_lambda$35$$35$12 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$16 (Str Str) Int)
(declare-fun smt_lambda$35$$35$30 ((Array Str Bool) Str) Int)
(declare-fun smt_lambda$35$$35$24 ((Array Int Bool) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$38 ((_ BitVec 32) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$36 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$43 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$47 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$28 ((Array Str Bool) Int) Int)
(declare-fun smt_lambda$35$$35$29 ((Array Str Bool) Bool) Int)
(declare-fun smt_lambda$35$$35$15 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$23 ((Array Int Bool) Str) Int)
(declare-fun smt_lambda$35$$35$13 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$6 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$34 ((Array Str Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$45 ((_ BitVec 64) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$42 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$35 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$40 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$27 ((Array Int Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$37 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$14 (Str Int) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$32 ((Array Str Bool) (Array Str Bool)) Int)
(declare-fun smt_lambda$35$$35$20 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$18 (Str (Array Str Bool)) Int)
(declare-fun smt_lambda$35$$35$17 (Str (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$46 ((_ BitVec 64) (Array Str Bool)) Int)
(declare-fun smt_lambda$35$$35$21 ((Array Int Bool) Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$25 ((Array Int Bool) (Array Str Bool)) Int)
(declare-fun smt_lambda$35$$35$41 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$33 ((Array Str Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$26 ((Array Int Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (Array Str Bool)) Int)
(declare-fun smt_lambda$35$$35$48 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$22 ((Array Int Bool) Bool) Int)
(declare-fun smt_lambda$35$$35$31 ((Array Str Bool) (Array Int Bool)) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$28 () (Array Str Bool))
(declare-fun lam_arg$35$$35$2$35$$35$28 () (Array Str Bool))
(declare-fun lam_arg$35$$35$3$35$$35$28 () (Array Str Bool))
(declare-fun lam_arg$35$$35$4$35$$35$28 () (Array Str Bool))
(declare-fun lam_arg$35$$35$5$35$$35$28 () (Array Str Bool))
(declare-fun lam_arg$35$$35$6$35$$35$28 () (Array Str Bool))
(declare-fun lam_arg$35$$35$7$35$$35$28 () (Array Str Bool))
(declare-fun lam_arg$35$$35$1$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$14 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$21 () (Array Int Bool))
(declare-fun lam_arg$35$$35$2$35$$35$21 () (Array Int Bool))
(declare-fun lam_arg$35$$35$3$35$$35$21 () (Array Int Bool))
(declare-fun lam_arg$35$$35$4$35$$35$21 () (Array Int Bool))
(declare-fun lam_arg$35$$35$5$35$$35$21 () (Array Int Bool))
(declare-fun lam_arg$35$$35$6$35$$35$21 () (Array Int Bool))
(declare-fun lam_arg$35$$35$7$35$$35$21 () (Array Int Bool))
(declare-fun lam_arg$35$$35$1$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$7 () Bool)

(assert (= (strLen lit$36$director) 8))
(push 1)
(define-fun b$36$$35$$35$1 () Bool (= a lit$36$director))
(define-fun b$36$$35$$35$2 () Bool (= (apply$35$$35$4 listElts things) ((_ map or) (store ((as const (Array Str Bool)) false) lit$36$year true) ((_ map or) (store ((as const (Array Str Bool)) false) lit$36$star true) ((_ map or) (store ((as const (Array Str Bool)) false) lit$36$director true) (store ((as const (Array Str Bool)) false) lit$36$title true))))))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$1 b$36$$35$$35$2))
(push 1)
(assert (not (select (apply$35$$35$4 listElts things) a)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(pop 1)

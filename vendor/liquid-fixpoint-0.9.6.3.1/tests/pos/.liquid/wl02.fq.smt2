(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun x16 () Int)
(declare-fun x13 () Int)
(declare-fun x8 () Int)
(declare-fun VV$35$$35$17 () Int)
(declare-fun x17 () Int)
(declare-fun x0 () Int)
(declare-fun VV$35$$35$8 () Int)
(declare-fun lq_karg$36$v$35$$35$k20 () Int)
(declare-fun x5 () Int)
(declare-fun VV$35$$35$0 () Int)
(declare-fun VV$35$$35$7 () Int)
(declare-fun lq_karg$36$v$35$$35$k5 () Int)
(declare-fun lq_karg$36$v$35$$35$k12 () Int)
(declare-fun cast_as () Int)
(declare-fun x7 () Int)
(declare-fun lq_karg$36$v$35$$35$k8 () Int)
(declare-fun x15 () Int)
(declare-fun x14 () Int)
(declare-fun lq_karg$36$v$35$$35$k13 () Int)
(declare-fun lq_karg$36$v$35$$35$k15 () Int)
(declare-fun VV$35$$35$16 () Int)
(declare-fun VV$35$$35$18 () Int)
(declare-fun x2 () Int)
(declare-fun lq_karg$36$v$35$$35$k2 () Int)
(declare-fun VV$35$$35$6 () Int)
(declare-fun lq_karg$36$v$35$$35$k3 () Int)
(declare-fun lq_karg$36$v$35$$35$k4 () Int)
(declare-fun lq_karg$36$v$35$$35$k7 () Int)
(declare-fun lq_karg$36$v$35$$35$k11 () Int)
(declare-fun lq_karg$36$v$35$$35$k17 () Int)
(declare-fun lq_karg$36$v$35$$35$k10 () Int)
(declare-fun VV$35$$35$13 () Int)
(declare-fun lq_karg$36$v$35$$35$k1 () Int)
(declare-fun VV$35$$35$5 () Int)
(declare-fun VV$35$$35$100 () Int)
(declare-fun VV$35$$35$20 () Int)
(declare-fun lq_karg$36$v$35$$35$k18 () Int)
(declare-fun x19 () Int)
(declare-fun VV$35$$35$14 () Int)
(declare-fun lq_karg$36$v$35$$35$k0 () Int)
(declare-fun VV$35$$35$19 () Int)
(declare-fun lq_karg$36$v$35$$35$k14 () Int)
(declare-fun VV$35$$35$2 () Int)
(declare-fun x6 () Int)
(declare-fun VV$35$$35$12 () Int)
(declare-fun lq_karg$36$v$35$$35$k16 () Int)
(declare-fun lq_karg$36$v$35$$35$k6 () Int)
(declare-fun VV$35$$35$9 () Int)
(declare-fun VV$35$$35$3 () Int)
(declare-fun VV$35$$35$1 () Int)
(declare-fun x10 () Int)
(declare-fun x3 () Int)
(declare-fun x4 () Int)
(declare-fun x12 () Int)
(declare-fun VV$35$$35$10 () Int)
(declare-fun x20 () Int)
(declare-fun x9 () Int)
(declare-fun x18 () Int)
(declare-fun VV$35$$35$11 () Int)
(declare-fun VV$35$$35$15 () Int)
(declare-fun VV$35$$35$4 () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_karg$36$v$35$$35$k9 () Int)
(declare-fun lq_karg$36$v$35$$35$k19 () Int)
(declare-fun x11 () Int)
(declare-fun x1 () Int)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$16 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$32 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$10 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$21 (Int (Array Int Bool)) (Array Int Bool))
(declare-fun apply$35$$35$27 (Int (_ BitVec 32)) (Array Int Bool))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$25 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$31 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$34 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$20 (Int (Array Int Bool)) Str)
(declare-fun apply$35$$35$11 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$33 (Int (_ BitVec 64)) (Array Int Bool))
(declare-fun apply$35$$35$30 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$28 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int (Array Int Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$26 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$17 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$15 (Int Str) (Array Int Bool))
(declare-fun apply$35$$35$18 (Int (Array Int Bool)) Int)
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$9 (Int Bool) (Array Int Bool))
(declare-fun apply$35$$35$3 (Int Int) (Array Int Bool))
(declare-fun apply$35$$35$29 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$22 (Int (Array Int Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$35 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$19 (Int (Array Int Bool)) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$16 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$32 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$10 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$21 ((Array Int Bool)) (Array Int Bool))
(declare-fun coerce$35$$35$27 ((_ BitVec 32)) (Array Int Bool))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$25 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$31 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$34 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$20 ((Array Int Bool)) Str)
(declare-fun coerce$35$$35$11 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$33 ((_ BitVec 64)) (Array Int Bool))
(declare-fun coerce$35$$35$30 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$28 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$23 ((Array Int Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$26 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$17 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$15 (Str) (Array Int Bool))
(declare-fun coerce$35$$35$18 ((Array Int Bool)) Int)
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$9 (Bool) (Array Int Bool))
(declare-fun coerce$35$$35$3 (Int) (Array Int Bool))
(declare-fun coerce$35$$35$29 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$22 ((Array Int Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$35 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$19 ((Array Int Bool)) Bool)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$16 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$32 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$21 ((Array Int Bool) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$27 ((_ BitVec 32) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$25 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$31 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$34 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$20 ((Array Int Bool) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$33 ((_ BitVec 64) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$30 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$28 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 ((Array Int Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$26 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$17 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$15 (Str (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$18 ((Array Int Bool) Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$29 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$22 ((Array Int Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$35 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$19 ((Array Int Bool) Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(push 1)
(define-fun b$36$$35$$35$32 () Bool (= VV$35$$35$10 x9))
(define-fun b$36$$35$$35$33 () Bool (= VV$35$$35$11 x10))
(define-fun b$36$$35$$35$34 () Bool (= VV$35$$35$12 x11))
(define-fun b$36$$35$$35$35 () Bool (= VV$35$$35$13 x12))
(define-fun b$36$$35$$35$36 () Bool (= VV$35$$35$14 x13))
(define-fun b$36$$35$$35$37 () Bool (= VV$35$$35$15 x14))
(define-fun b$36$$35$$35$38 () Bool (= VV$35$$35$16 x15))
(define-fun b$36$$35$$35$39 () Bool (= VV$35$$35$17 x16))
(define-fun b$36$$35$$35$40 () Bool (= VV$35$$35$18 x17))
(define-fun b$36$$35$$35$41 () Bool (= VV$35$$35$19 x18))
(define-fun b$36$$35$$35$42 () Bool (= VV$35$$35$20 x19))
(define-fun b$36$$35$$35$21 () Bool (= VV$35$$35$0 10))
(define-fun b$36$$35$$35$22 () Bool (= VV$35$$35$1 x0))
(define-fun b$36$$35$$35$23 () Bool (= VV$35$$35$2 x1))
(define-fun b$36$$35$$35$24 () Bool (= VV$35$$35$3 x2))
(define-fun b$36$$35$$35$25 () Bool (= VV$35$$35$4 x3))
(define-fun b$36$$35$$35$26 () Bool (= VV$35$$35$100 x20))
(define-fun b$36$$35$$35$27 () Bool (= VV$35$$35$5 x4))
(define-fun b$36$$35$$35$28 () Bool (= VV$35$$35$6 x5))
(define-fun b$36$$35$$35$29 () Bool (= VV$35$$35$7 x6))
(define-fun b$36$$35$$35$30 () Bool (= VV$35$$35$8 x7))
(define-fun b$36$$35$$35$31 () Bool (= VV$35$$35$9 x8))
(push 1)
(push 1)
(assert (and (exists ((lq_karg$36$v$35$$35$k20 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k20 x20) (= v x20) (exists ((VV$35$$35$20 Int) (x19 Int)) (and (exists ((v Int) (lq_karg$36$v$35$$35$k19 Int)) (and (= lq_karg$36$v$35$$35$k19 x19) (= v x19) (exists ((VV$35$$35$19 Int) (x18 Int)) (and (exists ((lq_karg$36$v$35$$35$k18 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k18 x18) (= v x18) (exists ((VV$35$$35$18 Int) (x17 Int)) (and (exists ((lq_karg$36$v$35$$35$k17 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k17 x17) (= v x17) (exists ((VV$35$$35$17 Int) (x16 Int)) (and (exists ((v Int) (lq_karg$36$v$35$$35$k16 Int)) (and (= lq_karg$36$v$35$$35$k16 x16) (= v x16) (exists ((VV$35$$35$16 Int) (x15 Int)) (and (exists ((lq_karg$36$v$35$$35$k15 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k15 x15) (= v x15) (exists ((VV$35$$35$15 Int) (x14 Int)) (and (exists ((v Int) (lq_karg$36$v$35$$35$k14 Int)) (and (= lq_karg$36$v$35$$35$k14 x14) (= v x14) (exists ((VV$35$$35$14 Int) (x13 Int)) (and (exists ((lq_karg$36$v$35$$35$k13 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k13 x13) (= v x13) (exists ((VV$35$$35$13 Int) (x12 Int)) (and (exists ((lq_karg$36$v$35$$35$k12 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k12 x12) (= v x12) (exists ((VV$35$$35$12 Int) (x11 Int)) (and (exists ((lq_karg$36$v$35$$35$k11 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k11 x11) (= v x11) (exists ((VV$35$$35$11 Int) (x10 Int)) (and (exists ((lq_karg$36$v$35$$35$k10 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k10 x10) (= v x10) (exists ((VV$35$$35$10 Int) (x9 Int)) (and (exists ((v Int) (lq_karg$36$v$35$$35$k9 Int)) (and (= lq_karg$36$v$35$$35$k9 x9) (= v x9) (exists ((x8 Int) (VV$35$$35$9 Int)) (and (exists ((lq_karg$36$v$35$$35$k8 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k8 x8) (= v x8) (exists ((x7 Int) (VV$35$$35$8 Int)) (and (exists ((lq_karg$36$v$35$$35$k7 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k7 x7) (= v x7) (exists ((x6 Int) (VV$35$$35$7 Int)) (and (exists ((v Int) (lq_karg$36$v$35$$35$k6 Int)) (and (= lq_karg$36$v$35$$35$k6 x6) (= v x6) (exists ((x5 Int) (VV$35$$35$6 Int)) (and (exists ((lq_karg$36$v$35$$35$k5 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k5 x5) (= v x5) (exists ((x4 Int) (VV$35$$35$5 Int)) (and (exists ((lq_karg$36$v$35$$35$k4 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k4 x4) (= v x4) (exists ((x3 Int) (VV$35$$35$4 Int)) (and (exists ((lq_karg$36$v$35$$35$k3 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k3 x3) (= v x3) (exists ((x2 Int) (VV$35$$35$3 Int)) (and (exists ((lq_karg$36$v$35$$35$k2 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k2 x2) (= v x2) (exists ((x1 Int) (VV$35$$35$2 Int)) (and (exists ((lq_karg$36$v$35$$35$k1 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k1 x1) (= v x1) (exists ((x0 Int) (VV$35$$35$1 Int)) (and (exists ((lq_karg$36$v$35$$35$k0 Int) (v Int)) (and (= lq_karg$36$v$35$$35$k0 x0) (= v x0) (exists ((VV$35$$35$0 Int)) (and (= VV$35$$35$0 10) (= lq_karg$36$v$35$$35$k0 VV$35$$35$0))))) (= VV$35$$35$1 x0) (= lq_karg$36$v$35$$35$k1 VV$35$$35$1))))) (= VV$35$$35$2 x1) (= lq_karg$36$v$35$$35$k2 VV$35$$35$2))))) (= VV$35$$35$3 x2) (= lq_karg$36$v$35$$35$k3 VV$35$$35$3))))) (= VV$35$$35$4 x3) (= lq_karg$36$v$35$$35$k4 VV$35$$35$4))))) (= VV$35$$35$5 x4) (= lq_karg$36$v$35$$35$k5 VV$35$$35$5))))) (= VV$35$$35$6 x5) (= lq_karg$36$v$35$$35$k6 VV$35$$35$6))))) (= VV$35$$35$7 x6) (= lq_karg$36$v$35$$35$k7 VV$35$$35$7))))) (= VV$35$$35$8 x7) (= lq_karg$36$v$35$$35$k8 VV$35$$35$8))))) (= VV$35$$35$9 x8) (= lq_karg$36$v$35$$35$k9 VV$35$$35$9))))) (= VV$35$$35$10 x9) (= lq_karg$36$v$35$$35$k10 VV$35$$35$10))))) (= VV$35$$35$11 x10) (= lq_karg$36$v$35$$35$k11 VV$35$$35$11))))) (= VV$35$$35$12 x11) (= lq_karg$36$v$35$$35$k12 VV$35$$35$12))))) (= VV$35$$35$13 x12) (= lq_karg$36$v$35$$35$k13 VV$35$$35$13))))) (= VV$35$$35$14 x13) (= lq_karg$36$v$35$$35$k14 VV$35$$35$14))))) (= VV$35$$35$15 x14) (= lq_karg$36$v$35$$35$k15 VV$35$$35$15))))) (= VV$35$$35$16 x15) (= lq_karg$36$v$35$$35$k16 VV$35$$35$16))))) (= VV$35$$35$17 x16) (= lq_karg$36$v$35$$35$k17 VV$35$$35$17))))) (= VV$35$$35$18 x17) (= lq_karg$36$v$35$$35$k18 VV$35$$35$18))))) (= VV$35$$35$19 x18) (= lq_karg$36$v$35$$35$k19 VV$35$$35$19))))) (= VV$35$$35$20 x19) (= lq_karg$36$v$35$$35$k20 VV$35$$35$20))))) b$36$$35$$35$26))
(push 1)
(assert (not (<= 0 VV$35$$35$100)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(pop 1)

(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Peano 0)) ((par () (mkZ (mkS (cS0 Peano))))))
(declare-datatypes ((Even 0)) ((par () (mkEZ (mkESS (cESS0 Peano) (cESS1 Even))))))
(declare-datatypes ((Ev 0)) ((par () ((mkEv (cEv0 Peano))))))
(declare-fun p () Even)
(declare-fun q () Even)
(declare-fun m () Peano)
(declare-fun cast_as () Int)
(declare-fun n () Peano)
(declare-fun VV$35$$35$2 () Even)
(declare-fun VV$35$$35$1 () Even)
(declare-fun prop () Int)
(declare-fun cast_as_int () Int)
(declare-fun apply$35$$35$16 (Int Bool) Even)
(declare-fun apply$35$$35$76 (Int Peano) (_ BitVec 32))
(declare-fun apply$35$$35$25 (Int Str) Even)
(declare-fun apply$35$$35$6 (Int Int) Ev)
(declare-fun apply$35$$35$68 (Int Even) (_ BitVec 64))
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$56 (Int Ev) Str)
(declare-fun apply$35$$35$60 (Int Ev) Ev)
(declare-fun apply$35$$35$64 (Int Even) Bool)
(declare-fun apply$35$$35$22 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$47 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$59 (Int Ev) (_ BitVec 64))
(declare-fun apply$35$$35$13 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$55 (Int Ev) Bool)
(declare-fun apply$35$$35$11 (Int Bool) Str)
(declare-fun apply$35$$35$20 (Int Str) Str)
(declare-fun apply$35$$35$35 (Int (Array Int Bool)) Peano)
(declare-fun apply$35$$35$66 (Int Even) (Array Int Bool))
(declare-fun apply$35$$35$63 (Int Even) Int)
(declare-fun apply$35$$35$75 (Int Peano) (Array Int Bool))
(declare-fun apply$35$$35$54 (Int Ev) Int)
(declare-fun apply$35$$35$30 (Int (Array Int Bool)) (Array Int Bool))
(declare-fun apply$35$$35$7 (Int Int) Even)
(declare-fun apply$35$$35$39 (Int (_ BitVec 32)) (Array Int Bool))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$37 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$46 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$49 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$67 (Int Even) (_ BitVec 32))
(declare-fun apply$35$$35$69 (Int Even) Ev)
(declare-fun apply$35$$35$19 (Int Str) Bool)
(declare-fun apply$35$$35$80 (Int Peano) Peano)
(declare-fun apply$35$$35$53 (Int (_ BitVec 64)) Peano)
(declare-fun apply$35$$35$70 (Int Even) Even)
(declare-fun apply$35$$35$29 (Int (Array Int Bool)) Str)
(declare-fun apply$35$$35$14 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$33 (Int (Array Int Bool)) Ev)
(declare-fun apply$35$$35$48 (Int (_ BitVec 64)) (Array Int Bool))
(declare-fun apply$35$$35$61 (Int Ev) Even)
(declare-fun apply$35$$35$34 (Int (Array Int Bool)) Even)
(declare-fun apply$35$$35$17 (Int Bool) Peano)
(declare-fun apply$35$$35$45 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$58 (Int Ev) (_ BitVec 32))
(declare-fun apply$35$$35$36 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$42 (Int (_ BitVec 32)) Ev)
(declare-fun apply$35$$35$65 (Int Even) Str)
(declare-fun apply$35$$35$26 (Int Str) Peano)
(declare-fun apply$35$$35$44 (Int (_ BitVec 32)) Peano)
(declare-fun apply$35$$35$40 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$73 (Int Peano) Bool)
(declare-fun apply$35$$35$79 (Int Peano) Even)
(declare-fun apply$35$$35$32 (Int (Array Int Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$24 (Int Str) Ev)
(declare-fun apply$35$$35$38 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$51 (Int (_ BitVec 64)) Ev)
(declare-fun apply$35$$35$18 (Int Str) Int)
(declare-fun apply$35$$35$10 (Int Bool) Bool)
(declare-fun apply$35$$35$62 (Int Ev) Peano)
(declare-fun apply$35$$35$23 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$43 (Int (_ BitVec 32)) Even)
(declare-fun apply$35$$35$8 (Int Int) Peano)
(declare-fun apply$35$$35$72 (Int Peano) Int)
(declare-fun apply$35$$35$21 (Int Str) (Array Int Bool))
(declare-fun apply$35$$35$27 (Int (Array Int Bool)) Int)
(declare-fun apply$35$$35$9 (Int Bool) Int)
(declare-fun apply$35$$35$71 (Int Even) Peano)
(declare-fun apply$35$$35$57 (Int Ev) (Array Int Bool))
(declare-fun apply$35$$35$12 (Int Bool) (Array Int Bool))
(declare-fun apply$35$$35$52 (Int (_ BitVec 64)) Even)
(declare-fun apply$35$$35$3 (Int Int) (Array Int Bool))
(declare-fun apply$35$$35$41 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$77 (Int Peano) (_ BitVec 64))
(declare-fun apply$35$$35$31 (Int (Array Int Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int Bool) Ev)
(declare-fun apply$35$$35$74 (Int Peano) Str)
(declare-fun apply$35$$35$50 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$78 (Int Peano) Ev)
(declare-fun apply$35$$35$28 (Int (Array Int Bool)) Bool)
(declare-fun coerce$35$$35$16 (Bool) Even)
(declare-fun coerce$35$$35$76 (Peano) (_ BitVec 32))
(declare-fun coerce$35$$35$25 (Str) Even)
(declare-fun coerce$35$$35$6 (Int) Ev)
(declare-fun coerce$35$$35$68 (Even) (_ BitVec 64))
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$56 (Ev) Str)
(declare-fun coerce$35$$35$60 (Ev) Ev)
(declare-fun coerce$35$$35$64 (Even) Bool)
(declare-fun coerce$35$$35$22 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$47 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$59 (Ev) (_ BitVec 64))
(declare-fun coerce$35$$35$13 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$55 (Ev) Bool)
(declare-fun coerce$35$$35$11 (Bool) Str)
(declare-fun coerce$35$$35$20 (Str) Str)
(declare-fun coerce$35$$35$35 ((Array Int Bool)) Peano)
(declare-fun coerce$35$$35$66 (Even) (Array Int Bool))
(declare-fun coerce$35$$35$63 (Even) Int)
(declare-fun coerce$35$$35$75 (Peano) (Array Int Bool))
(declare-fun coerce$35$$35$54 (Ev) Int)
(declare-fun coerce$35$$35$30 ((Array Int Bool)) (Array Int Bool))
(declare-fun coerce$35$$35$7 (Int) Even)
(declare-fun coerce$35$$35$39 ((_ BitVec 32)) (Array Int Bool))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$37 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$46 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$49 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$67 (Even) (_ BitVec 32))
(declare-fun coerce$35$$35$69 (Even) Ev)
(declare-fun coerce$35$$35$19 (Str) Bool)
(declare-fun coerce$35$$35$80 (Peano) Peano)
(declare-fun coerce$35$$35$53 ((_ BitVec 64)) Peano)
(declare-fun coerce$35$$35$70 (Even) Even)
(declare-fun coerce$35$$35$29 ((Array Int Bool)) Str)
(declare-fun coerce$35$$35$14 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$33 ((Array Int Bool)) Ev)
(declare-fun coerce$35$$35$48 ((_ BitVec 64)) (Array Int Bool))
(declare-fun coerce$35$$35$61 (Ev) Even)
(declare-fun coerce$35$$35$34 ((Array Int Bool)) Even)
(declare-fun coerce$35$$35$17 (Bool) Peano)
(declare-fun coerce$35$$35$45 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$58 (Ev) (_ BitVec 32))
(declare-fun coerce$35$$35$36 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$42 ((_ BitVec 32)) Ev)
(declare-fun coerce$35$$35$65 (Even) Str)
(declare-fun coerce$35$$35$26 (Str) Peano)
(declare-fun coerce$35$$35$44 ((_ BitVec 32)) Peano)
(declare-fun coerce$35$$35$40 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$73 (Peano) Bool)
(declare-fun coerce$35$$35$79 (Peano) Even)
(declare-fun coerce$35$$35$32 ((Array Int Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$24 (Str) Ev)
(declare-fun coerce$35$$35$38 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$51 ((_ BitVec 64)) Ev)
(declare-fun coerce$35$$35$18 (Str) Int)
(declare-fun coerce$35$$35$10 (Bool) Bool)
(declare-fun coerce$35$$35$62 (Ev) Peano)
(declare-fun coerce$35$$35$23 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$43 ((_ BitVec 32)) Even)
(declare-fun coerce$35$$35$8 (Int) Peano)
(declare-fun coerce$35$$35$72 (Peano) Int)
(declare-fun coerce$35$$35$21 (Str) (Array Int Bool))
(declare-fun coerce$35$$35$27 ((Array Int Bool)) Int)
(declare-fun coerce$35$$35$9 (Bool) Int)
(declare-fun coerce$35$$35$71 (Even) Peano)
(declare-fun coerce$35$$35$57 (Ev) (Array Int Bool))
(declare-fun coerce$35$$35$12 (Bool) (Array Int Bool))
(declare-fun coerce$35$$35$52 ((_ BitVec 64)) Even)
(declare-fun coerce$35$$35$3 (Int) (Array Int Bool))
(declare-fun coerce$35$$35$41 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$77 (Peano) (_ BitVec 64))
(declare-fun coerce$35$$35$31 ((Array Int Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$15 (Bool) Ev)
(declare-fun coerce$35$$35$74 (Peano) Str)
(declare-fun coerce$35$$35$50 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$78 (Peano) Ev)
(declare-fun coerce$35$$35$28 ((Array Int Bool)) Bool)
(declare-fun smt_lambda$35$$35$16 (Bool Even) Int)
(declare-fun smt_lambda$35$$35$76 (Peano (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$25 (Str Even) Int)
(declare-fun smt_lambda$35$$35$6 (Int Ev) Int)
(declare-fun smt_lambda$35$$35$68 (Even (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$56 (Ev Str) Int)
(declare-fun smt_lambda$35$$35$60 (Ev Ev) Int)
(declare-fun smt_lambda$35$$35$64 (Even Bool) Int)
(declare-fun smt_lambda$35$$35$22 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$47 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$59 (Ev (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$13 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$55 (Ev Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$20 (Str Str) Int)
(declare-fun smt_lambda$35$$35$35 ((Array Int Bool) Peano) Int)
(declare-fun smt_lambda$35$$35$66 (Even (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$63 (Even Int) Int)
(declare-fun smt_lambda$35$$35$75 (Peano (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$54 (Ev Int) Int)
(declare-fun smt_lambda$35$$35$30 ((Array Int Bool) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$7 (Int Even) Int)
(declare-fun smt_lambda$35$$35$39 ((_ BitVec 32) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$37 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$46 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$49 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$67 (Even (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$69 (Even Ev) Int)
(declare-fun smt_lambda$35$$35$19 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$80 (Peano Peano) Int)
(declare-fun smt_lambda$35$$35$53 ((_ BitVec 64) Peano) Int)
(declare-fun smt_lambda$35$$35$70 (Even Even) Int)
(declare-fun smt_lambda$35$$35$29 ((Array Int Bool) Str) Int)
(declare-fun smt_lambda$35$$35$14 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$33 ((Array Int Bool) Ev) Int)
(declare-fun smt_lambda$35$$35$48 ((_ BitVec 64) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$61 (Ev Even) Int)
(declare-fun smt_lambda$35$$35$34 ((Array Int Bool) Even) Int)
(declare-fun smt_lambda$35$$35$17 (Bool Peano) Int)
(declare-fun smt_lambda$35$$35$45 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$58 (Ev (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$36 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$42 ((_ BitVec 32) Ev) Int)
(declare-fun smt_lambda$35$$35$65 (Even Str) Int)
(declare-fun smt_lambda$35$$35$26 (Str Peano) Int)
(declare-fun smt_lambda$35$$35$44 ((_ BitVec 32) Peano) Int)
(declare-fun smt_lambda$35$$35$40 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$73 (Peano Bool) Int)
(declare-fun smt_lambda$35$$35$79 (Peano Even) Int)
(declare-fun smt_lambda$35$$35$32 ((Array Int Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$24 (Str Ev) Int)
(declare-fun smt_lambda$35$$35$38 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$51 ((_ BitVec 64) Ev) Int)
(declare-fun smt_lambda$35$$35$18 (Str Int) Int)
(declare-fun smt_lambda$35$$35$10 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$62 (Ev Peano) Int)
(declare-fun smt_lambda$35$$35$23 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$43 ((_ BitVec 32) Even) Int)
(declare-fun smt_lambda$35$$35$8 (Int Peano) Int)
(declare-fun smt_lambda$35$$35$72 (Peano Int) Int)
(declare-fun smt_lambda$35$$35$21 (Str (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$27 ((Array Int Bool) Int) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$71 (Even Peano) Int)
(declare-fun smt_lambda$35$$35$57 (Ev (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$12 (Bool (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$52 ((_ BitVec 64) Even) Int)
(declare-fun smt_lambda$35$$35$3 (Int (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$41 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$77 (Peano (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$31 ((Array Int Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 (Bool Ev) Int)
(declare-fun smt_lambda$35$$35$74 (Peano Str) Int)
(declare-fun smt_lambda$35$$35$50 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$78 (Peano Ev) Int)
(declare-fun smt_lambda$35$$35$28 ((Array Int Bool) Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$63 () Even)
(declare-fun lam_arg$35$$35$2$35$$35$63 () Even)
(declare-fun lam_arg$35$$35$3$35$$35$63 () Even)
(declare-fun lam_arg$35$$35$4$35$$35$63 () Even)
(declare-fun lam_arg$35$$35$5$35$$35$63 () Even)
(declare-fun lam_arg$35$$35$6$35$$35$63 () Even)
(declare-fun lam_arg$35$$35$7$35$$35$63 () Even)
(declare-fun lam_arg$35$$35$1$35$$35$54 () Ev)
(declare-fun lam_arg$35$$35$2$35$$35$54 () Ev)
(declare-fun lam_arg$35$$35$3$35$$35$54 () Ev)
(declare-fun lam_arg$35$$35$4$35$$35$54 () Ev)
(declare-fun lam_arg$35$$35$5$35$$35$54 () Ev)
(declare-fun lam_arg$35$$35$6$35$$35$54 () Ev)
(declare-fun lam_arg$35$$35$7$35$$35$54 () Ev)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$45 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$36 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$18 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$72 () Peano)
(declare-fun lam_arg$35$$35$2$35$$35$72 () Peano)
(declare-fun lam_arg$35$$35$3$35$$35$72 () Peano)
(declare-fun lam_arg$35$$35$4$35$$35$72 () Peano)
(declare-fun lam_arg$35$$35$5$35$$35$72 () Peano)
(declare-fun lam_arg$35$$35$6$35$$35$72 () Peano)
(declare-fun lam_arg$35$$35$7$35$$35$72 () Peano)
(declare-fun lam_arg$35$$35$1$35$$35$27 () (Array Int Bool))
(declare-fun lam_arg$35$$35$2$35$$35$27 () (Array Int Bool))
(declare-fun lam_arg$35$$35$3$35$$35$27 () (Array Int Bool))
(declare-fun lam_arg$35$$35$4$35$$35$27 () (Array Int Bool))
(declare-fun lam_arg$35$$35$5$35$$35$27 () (Array Int Bool))
(declare-fun lam_arg$35$$35$6$35$$35$27 () (Array Int Bool))
(declare-fun lam_arg$35$$35$7$35$$35$27 () (Array Int Bool))
(declare-fun lam_arg$35$$35$1$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$9 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$9 () Bool)
(push 1)
(define-fun b$36$$35$$35$1 () Bool (and (= (apply$35$$35$69 (as prop Int) p) (mkEv mkZ)) (= (apply$35$$35$69 (as prop Int) p) (mkEv (mkS (mkS n))))))
(define-fun b$36$$35$$35$3 () Bool (= (apply$35$$35$69 (as prop Int) q) (mkEv m)))
(define-fun b$36$$35$$35$4 () Bool (and (= (apply$35$$35$69 (as prop Int) p) (mkEv (mkS (mkS m)))) (= (apply$35$$35$69 (as prop Int) p) (mkEv (mkS (mkS n))))))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$1))
(push 1)
(assert (not (= (apply$35$$35$69 (as prop Int) VV$35$$35$1) (mkEv n))))
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$3 b$36$$35$$35$4))
(push 1)
(assert (not (= (apply$35$$35$69 (as prop Int) VV$35$$35$2) (mkEv n))))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(pop 1)

(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Types.Word32Rep () Int)
(declare-fun GHC.Prim.$40$$35$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$35$$41$ () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806404$35$$35$d3kw () Int)
(declare-fun GHC.Types.DoubleRep () Int)
(declare-fun GHC.Prim.$40$$35$$44$$44$$44$$44$$44$$44$$44$$35$$41$ () Int)
(declare-fun GHC.Types.Word16Rep () Int)
(declare-fun GHC.Prim.$40$$35$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$35$$41$ () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.Types.WordRep () Int)
(declare-fun GHC.Types.Word64Rep () Int)
(declare-fun len () Int)
(declare-fun GHC.Types.BoxedRep () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun cast_as () Int)
(declare-fun lit$36$GHC.Exts_LHAssumptions () Str)
(declare-fun GHC.Types.AddrRep () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Types.Int16Rep () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun papp7 () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Prim.$61$$61$$35$ () Int)
(declare-fun GHC.Prim.$62$$61$$35$ () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Types.IntRep () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.CString.unpackCStringUtf8$35$ () Int)
(declare-fun GHC.Prim.$40$$35$$35$$41$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Prim.$40$$35$$44$$44$$35$$41$ () Int)
(declare-fun GHC.Tuple.Prim.$40$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.W$35$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lit$36$liquidhaskell$45$0.9.8.2$45$Ga1H4YqYKC8Ef4hKopFcTP () Str)
(declare-fun GHC.Types.MkCoercible () Int)
(declare-fun GHC.Types.Int32Rep () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.F$35$ () Int)
(declare-fun GHC.Types.D$35$ () Int)
(declare-fun GHC.Types.Int8Rep () Int)
(declare-fun GHC.Types.FloatRep () Int)
(declare-fun GHC.Prim.$40$$35$$44$$35$$41$ () Int)
(declare-fun GHC.Prim.$60$$61$$35$ () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Prim.$60$$35$ () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Types.Int64Rep () Int)
(declare-fun GHC.Prim.$62$$35$ () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Types.Word8Rep () Int)
(declare-fun GHC.Prim.$43$$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806406$35$$35$d3ky () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Tuple.Prim.$40$$44$$44$$41$ () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Prim.$45$$35$ () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Types.VecRep () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Prim.$40$$35$$44$$44$$44$$35$$41$ () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.isTrue$35$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Tuple.Prim.$40$$44$$41$ () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun tail () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Types.TupleRep () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Prim.Solo$35$ () Int)
(declare-fun GHC.Base.$58$$124$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun cast_as_int () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.SumRep () Int)
(declare-fun GHC.Prim.$40$$35$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$44$$35$$41$ () Int)
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Real)
(declare-fun apply$35$$35$26 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int Real) (Array Int Bool))
(declare-fun apply$35$$35$45 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$12 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int Real) (_ BitVec 32))
(declare-fun apply$35$$35$10 (Int Bool) Str)
(declare-fun apply$35$$35$24 (Int Str) Str)
(declare-fun apply$35$$35$20 (Int Real) (_ BitVec 64))
(declare-fun apply$35$$35$32 (Int (Array Int Bool)) (Array Int Bool))
(declare-fun apply$35$$35$39 (Int (_ BitVec 32)) (Array Int Bool))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$36 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$43 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$47 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$17 (Int Real) Str)
(declare-fun apply$35$$35$22 (Int Str) Bool)
(declare-fun apply$35$$35$31 (Int (Array Int Bool)) Str)
(declare-fun apply$35$$35$13 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$6 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$46 (Int (_ BitVec 64)) (Array Int Bool))
(declare-fun apply$35$$35$9 (Int Bool) Real)
(declare-fun apply$35$$35$37 (Int (_ BitVec 32)) Real)
(declare-fun apply$35$$35$42 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$30 (Int (Array Int Bool)) Real)
(declare-fun apply$35$$35$35 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$40 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$34 (Int (Array Int Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$38 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$21 (Int Str) Int)
(declare-fun apply$35$$35$8 (Int Bool) Bool)
(declare-fun apply$35$$35$27 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$23 (Int Str) Real)
(declare-fun apply$35$$35$25 (Int Str) (Array Int Bool))
(declare-fun apply$35$$35$28 (Int (Array Int Bool)) Int)
(declare-fun apply$35$$35$7 (Int Bool) Int)
(declare-fun apply$35$$35$15 (Int Real) Bool)
(declare-fun apply$35$$35$11 (Int Bool) (Array Int Bool))
(declare-fun apply$35$$35$4 (Int Int) (Array Int Bool))
(declare-fun apply$35$$35$44 (Int (_ BitVec 64)) Real)
(declare-fun apply$35$$35$41 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$3 (Int Int) Str)
(declare-fun apply$35$$35$33 (Int (Array Int Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$16 (Int Real) Real)
(declare-fun apply$35$$35$14 (Int Real) Int)
(declare-fun apply$35$$35$48 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$29 (Int (Array Int Bool)) Bool)
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Real)
(declare-fun coerce$35$$35$26 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$18 (Real) (Array Int Bool))
(declare-fun coerce$35$$35$45 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$12 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$19 (Real) (_ BitVec 32))
(declare-fun coerce$35$$35$10 (Bool) Str)
(declare-fun coerce$35$$35$24 (Str) Str)
(declare-fun coerce$35$$35$20 (Real) (_ BitVec 64))
(declare-fun coerce$35$$35$32 ((Array Int Bool)) (Array Int Bool))
(declare-fun coerce$35$$35$39 ((_ BitVec 32)) (Array Int Bool))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$36 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$43 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$47 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$17 (Real) Str)
(declare-fun coerce$35$$35$22 (Str) Bool)
(declare-fun coerce$35$$35$31 ((Array Int Bool)) Str)
(declare-fun coerce$35$$35$13 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$6 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$46 ((_ BitVec 64)) (Array Int Bool))
(declare-fun coerce$35$$35$9 (Bool) Real)
(declare-fun coerce$35$$35$37 ((_ BitVec 32)) Real)
(declare-fun coerce$35$$35$42 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$30 ((Array Int Bool)) Real)
(declare-fun coerce$35$$35$35 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$40 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$34 ((Array Int Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$38 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$21 (Str) Int)
(declare-fun coerce$35$$35$8 (Bool) Bool)
(declare-fun coerce$35$$35$27 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$23 (Str) Real)
(declare-fun coerce$35$$35$25 (Str) (Array Int Bool))
(declare-fun coerce$35$$35$28 ((Array Int Bool)) Int)
(declare-fun coerce$35$$35$7 (Bool) Int)
(declare-fun coerce$35$$35$15 (Real) Bool)
(declare-fun coerce$35$$35$11 (Bool) (Array Int Bool))
(declare-fun coerce$35$$35$4 (Int) (Array Int Bool))
(declare-fun coerce$35$$35$44 ((_ BitVec 64)) Real)
(declare-fun coerce$35$$35$41 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$3 (Int) Str)
(declare-fun coerce$35$$35$33 ((Array Int Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$16 (Real) Real)
(declare-fun coerce$35$$35$14 (Real) Int)
(declare-fun coerce$35$$35$48 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$29 ((Array Int Bool)) Bool)
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Real) Int)
(declare-fun smt_lambda$35$$35$26 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 (Real (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$45 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$12 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 (Real (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$10 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$24 (Str Str) Int)
(declare-fun smt_lambda$35$$35$20 (Real (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$32 ((Array Int Bool) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$39 ((_ BitVec 32) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$36 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$43 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$47 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$17 (Real Str) Int)
(declare-fun smt_lambda$35$$35$22 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$31 ((Array Int Bool) Str) Int)
(declare-fun smt_lambda$35$$35$13 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$6 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$46 ((_ BitVec 64) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Real) Int)
(declare-fun smt_lambda$35$$35$37 ((_ BitVec 32) Real) Int)
(declare-fun smt_lambda$35$$35$42 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$30 ((Array Int Bool) Real) Int)
(declare-fun smt_lambda$35$$35$35 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$40 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$34 ((Array Int Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$38 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$21 (Str Int) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$27 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$23 (Str Real) Int)
(declare-fun smt_lambda$35$$35$25 (Str (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$28 ((Array Int Bool) Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$15 (Real Bool) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$4 (Int (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$44 ((_ BitVec 64) Real) Int)
(declare-fun smt_lambda$35$$35$41 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$3 (Int Str) Int)
(declare-fun smt_lambda$35$$35$33 ((Array Int Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$16 (Real Real) Int)
(declare-fun smt_lambda$35$$35$14 (Real Int) Int)
(declare-fun smt_lambda$35$$35$48 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$29 ((Array Int Bool) Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$42 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$35 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$21 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$21 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$21 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$21 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$21 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$21 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$21 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$28 () (Array Int Bool))
(declare-fun lam_arg$35$$35$2$35$$35$28 () (Array Int Bool))
(declare-fun lam_arg$35$$35$3$35$$35$28 () (Array Int Bool))
(declare-fun lam_arg$35$$35$4$35$$35$28 () (Array Int Bool))
(declare-fun lam_arg$35$$35$5$35$$35$28 () (Array Int Bool))
(declare-fun lam_arg$35$$35$6$35$$35$28 () (Array Int Bool))
(declare-fun lam_arg$35$$35$7$35$$35$28 () (Array Int Bool))
(declare-fun lam_arg$35$$35$1$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$7 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$14 () Real)
(declare-fun lam_arg$35$$35$2$35$$35$14 () Real)
(declare-fun lam_arg$35$$35$3$35$$35$14 () Real)
(declare-fun lam_arg$35$$35$4$35$$35$14 () Real)
(declare-fun lam_arg$35$$35$5$35$$35$14 () Real)
(declare-fun lam_arg$35$$35$6$35$$35$14 () Real)
(declare-fun lam_arg$35$$35$7$35$$35$14 () Real)
(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct lit$36$liquidhaskell$45$0.9.8.2$45$Ga1H4YqYKC8Ef4hKopFcTP lit$36$GHC.Exts_LHAssumptions))
(assert (distinct GHC.Types.Word8Rep GHC.Types.Int64Rep GHC.Types.FloatRep GHC.Types.Int8Rep GHC.Types.Int32Rep GHC.Types.IntRep GHC.Types.Int16Rep GHC.Types.AddrRep GHC.Types.Word64Rep GHC.Types.WordRep GHC.Types.Word16Rep GHC.Types.DoubleRep GHC.Types.Word32Rep))
(assert (distinct GHC.Tuple.Prim.$40$$41$ GHC.Prim.$40$$35$$35$$41$))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))

(assert (= (strLen lit$36$GHC.Exts_LHAssumptions) 22))
(assert (= (strLen lit$36$liquidhaskell$45$0.9.8.2$45$Ga1H4YqYKC8Ef4hKopFcTP) 44))
(push 1)
(push 1)
(pop 1)
(pop 1)

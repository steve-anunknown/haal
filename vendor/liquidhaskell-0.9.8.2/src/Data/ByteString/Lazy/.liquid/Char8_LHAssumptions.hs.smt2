(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun Data.ByteString.Lazy.Char8.any () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Int.I64$35$ () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.ByteString.Lazy.singleton () Int)
(declare-fun Data.ByteString.Lazy.Char8.break () Int)
(declare-fun Data.ByteString.Internal.Type.BS () Int)
(declare-fun GHC.Word.W64$35$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.cons () Int)
(declare-fun Data.ByteString.Lazy.Char8.span () Int)
(declare-fun GHC.Int.I32$35$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.findIndex () Int)
(declare-fun Data.ByteString.Lazy.Char8.unlines () Int)
(declare-fun Data.ByteString.Lazy.takeWhile () Int)
(declare-fun GHC.IO.Handle.Types.DuplexHandle () Int)
(declare-fun Data.ByteString.Lazy.copy () Int)
(declare-fun Data.ByteString.Lazy.Char8.scanr () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun Data.ByteString.Lazy.elemIndex () Int)
(declare-fun Data.ByteString.Lazy.map () Int)
(declare-fun GHC.Word.W8$35$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.notElem () Int)
(declare-fun Data.ByteString.Lazy.ReadInt.readInt () Int)
(declare-fun len () Int)
(declare-fun Data.ByteString.Lazy.toChunks () Int)
(declare-fun Data.ByteString.Lazy.dropWhile () Int)
(declare-fun Data.ByteString.Lazy.append () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun Data.ByteString.Lazy.groupBy () Int)
(declare-fun Data.ByteString.Lazy.head () Int)
(declare-fun Data.ByteString.Lazy.last () Int)
(declare-fun Data.ByteString.Lazy.Char8.unpack () Int)
(declare-fun Data.ByteString.Lazy.Char8.scanl1 () Int)
(declare-fun Data.ByteString.Lazy.unsnoc () Int)
(declare-fun Data.ByteString.Lazy.Char8.index () Int)
(declare-fun Data.ByteString.Lazy.hGetNonBlocking () Int)
(declare-fun cast_as () Int)
(declare-fun Data.ByteString.Lazy.drop () Int)
(declare-fun Data.ByteString.Lazy.Char8.unsnoc () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792809081$35$$35$d41H () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792809083$35$$35$d41J () Int)
(declare-fun Data.ByteString.Lazy.minimum () Int)
(declare-fun Data.ByteString.Lazy.Char8.filter () Int)
(declare-fun Data.ByteString.Lazy.mapAccumL () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun Data.ByteString.Lazy.foldl1$39$ () Int)
(declare-fun Data.ByteString.Lazy.notElem () Int)
(declare-fun Data.ByteString.Lazy.Char8.intersperse () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun papp2 () Int)
(declare-fun Data.ByteString.Lazy.ReadNat.readInteger () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun papp7 () Int)
(declare-fun Data.ByteString.Lazy.tails () Int)
(declare-fun papp1 () Int)
(declare-fun bllen () Int)
(declare-fun Data.ByteString.Lazy.isPrefixOf () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun Data.ByteString.Lazy.elemIndexEnd () Int)
(declare-fun Data.ByteString.Lazy.Char8.concatMap () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun Data.ByteString.Lazy.Char8.maximum () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun papp5 () Int)
(declare-fun Data.ByteString.Lazy.Char8.foldl1 () Int)
(declare-fun Data.ByteString.Lazy.Char8.count () Int)
(declare-fun Data.ByteString.Lazy.concat () Int)
(declare-fun Data.ByteString.Lazy.Char8.unzip () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Tuple.Prim.$40$$41$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.mapAccumR () Int)
(declare-fun Data.ByteString.Lazy.Char8.last () Int)
(declare-fun papp4 () Int)
(declare-fun Data.ByteString.Lazy.splitAt () Int)
(declare-fun Data.ByteString.Lazy.splitWith () Int)
(declare-fun Data.ByteString.Lazy.Char8.mapAccumL () Int)
(declare-fun Data.ByteString.Lazy.break () Int)
(declare-fun Data.ByteString.Lazy.snoc () Int)
(declare-fun Data.ByteString.Lazy.Internal.Chunk () Int)
(declare-fun GHC.Types.W$35$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.Int.I8$35$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.dropWhile () Int)
(declare-fun lit$36$Data.ByteString.Lazy.Char8_LHAssumptions () Str)
(declare-fun Data.ByteString.Lazy.transpose () Int)
(declare-fun Data.ByteString.Lazy.Char8.replicate () Int)
(declare-fun Data.ByteString.Lazy.maximum () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun Data.ByteString.Lazy.mapAccumR () Int)
(declare-fun Data.ByteString.Lazy.intercalate () Int)
(declare-fun Data.ByteString.Lazy.split () Int)
(declare-fun Data.ByteString.Lazy.Internal.Empty () Int)
(declare-fun Data.ByteString.Lazy.Char8.groupBy () Int)
(declare-fun Data.ByteString.Lazy.concatMap () Int)
(declare-fun Data.ByteString.Lazy.foldr1 () Int)
(declare-fun lit$36$liquidhaskell$45$0.9.8.2$45$HBZKfLZq3zk3XxT5CzZx6o () Str)
(declare-fun Data.ByteString.Lazy.unzip () Int)
(declare-fun GHC.Word.W32$35$ () Int)
(declare-fun Data.ByteString.Lazy.findIndices () Int)
(declare-fun Data.ByteString.Lazy.foldl1 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun Data.ByteString.Lazy.find () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun Data.ByteString.Lazy.zip () Int)
(declare-fun stringlen () Int)
(declare-fun Data.ByteString.Lazy.take () Int)
(declare-fun Data.ByteString.Lazy.Char8.find () Int)
(declare-fun Data.ByteString.Internal.Type.$36$WBS () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.ByteString.Lazy.hGet () Int)
(declare-fun Data.ByteString.Lazy.Char8.split () Int)
(declare-fun Data.ByteString.Lazy.span () Int)
(declare-fun Data.ByteString.Lazy.Char8.findIndices () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun Data.ByteString.Lazy.Char8.snoc () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun Data.ByteString.Lazy.Char8.elemIndices () Int)
(declare-fun Data.ByteString.Lazy.filter () Int)
(declare-fun Data.ByteString.Lazy.fromChunks () Int)
(declare-fun Data.ByteString.Lazy.Char8.takeWhile () Int)
(declare-fun Data.ByteString.Lazy.unpack () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.IO.Handle.Types.FileHandle () Int)
(declare-fun GHC.Num.Natural.NS () Int)
(declare-fun GHC.Tuple.Prim.$40$$44$$44$$41$ () Int)
(declare-fun papp3 () Int)
(declare-fun Data.ByteString.Lazy.null () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun Data.ByteString.Lazy.pack () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Data.ByteString.Lazy.empty () Int)
(declare-fun Data.ByteString.Lazy.Char8.singleton () Int)
(declare-fun Data.ByteString.Lazy.Char8.map () Int)
(declare-fun Data.ByteString.Lazy.index () Int)
(declare-fun Data.ByteString.Lazy.inits () Int)
(declare-fun Data.ByteString.Lazy.Char8.elemIndex () Int)
(declare-fun Data.ByteString.Lazy.uncons () Int)
(declare-fun Data.ByteString.Lazy.group () Int)
(declare-fun Data.ByteString.Lazy.Char8.pack () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun Data.ByteString.Lazy.count () Int)
(declare-fun Data.ByteString.Lazy.Internal.$36$WChunk () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun Data.ByteString.Lazy.init () Int)
(declare-fun bslen () Int)
(declare-fun Data.ByteString.Lazy.partition () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun Data.ByteString.Lazy.Char8.foldl1$39$ () Int)
(declare-fun Data.ByteString.Lazy.isSuffixOf () Int)
(declare-fun Data.ByteString.Lazy.length () Int)
(declare-fun Data.ByteString.Lazy.Char8.scanl () Int)
(declare-fun Data.ByteString.Lazy.Char8.scanr1 () Int)
(declare-fun Data.ByteString.Lazy.any () Int)
(declare-fun head () Int)
(declare-fun Data.ByteString.Lazy.Char8.zip () Int)
(declare-fun GHC.Tuple.Prim.$40$$44$$41$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.minimum () Int)
(declare-fun Data.ByteString.Lazy.Char8.uncons () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Data.ByteString.Lazy.zipWith () Int)
(declare-fun tail () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun Data.ByteString.Lazy.Char8.foldr1 () Int)
(declare-fun Data.ByteString.Lazy.Char8.unwords () Int)
(declare-fun Data.ByteString.Lazy.Char8.splitWith () Int)
(declare-fun Data.ByteString.Lazy.Char8.all () Int)
(declare-fun GHC.Int.I16$35$ () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun Data.ByteString.Lazy.all () Int)
(declare-fun GHC.IO.Handle.Types.$36$WFileHandle () Int)
(declare-fun Data.ByteString.Lazy.Internal.toStrict () Int)
(declare-fun Data.ByteString.Lazy.Char8.words () Int)
(declare-fun Data.ByteString.Lazy.Char8.zipWith () Int)
(declare-fun Data.ByteString.Lazy.reverse () Int)
(declare-fun papp6 () Int)
(declare-fun Data.ByteString.Lazy.elem () Int)
(declare-fun Data.ByteString.Lazy.intersperse () Int)
(declare-fun GHC.IO.Handle.Types.$36$WDuplexHandle () Int)
(declare-fun Data.ByteString.Lazy.Internal.fromStrict () Int)
(declare-fun GHC.Base.$58$$124$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.head () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.lines () Int)
(declare-fun cast_as_int () Int)
(declare-fun Data.ByteString.Lazy.cons () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun Data.ByteString.Lazy.replicate () Int)
(declare-fun GHC.Num.Natural.NB () Int)
(declare-fun Data.ByteString.Lazy.findIndex () Int)
(declare-fun Data.ByteString.Lazy.elemIndices () Int)
(declare-fun Data.ByteString.Lazy.tail () Int)
(declare-fun GHC.Word.W16$35$ () Int)
(declare-fun Data.ByteString.Lazy.Char8.elem () Int)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$16 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$32 (Int (_ BitVec 64)) Str)
(declare-fun apply$35$$35$10 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$21 (Int (Array Int Bool)) (Array Int Bool))
(declare-fun apply$35$$35$27 (Int (_ BitVec 32)) (Array Int Bool))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$25 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$31 (Int (_ BitVec 64)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$34 (Int (_ BitVec 64)) (_ BitVec 32))
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$20 (Int (Array Int Bool)) Str)
(declare-fun apply$35$$35$11 (Int Bool) (_ BitVec 64))
(declare-fun apply$35$$35$5 (Int Int) (_ BitVec 64))
(declare-fun apply$35$$35$33 (Int (_ BitVec 64)) (Array Int Bool))
(declare-fun apply$35$$35$30 (Int (_ BitVec 64)) Int)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$28 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int (Array Int Bool)) (_ BitVec 64))
(declare-fun apply$35$$35$26 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$17 (Int Str) (_ BitVec 64))
(declare-fun apply$35$$35$15 (Int Str) (Array Int Bool))
(declare-fun apply$35$$35$18 (Int (Array Int Bool)) Int)
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$9 (Int Bool) (Array Int Bool))
(declare-fun apply$35$$35$3 (Int Int) (Array Int Bool))
(declare-fun apply$35$$35$29 (Int (_ BitVec 32)) (_ BitVec 64))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$22 (Int (Array Int Bool)) (_ BitVec 32))
(declare-fun apply$35$$35$35 (Int (_ BitVec 64)) (_ BitVec 64))
(declare-fun apply$35$$35$19 (Int (Array Int Bool)) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$16 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$32 ((_ BitVec 64)) Str)
(declare-fun coerce$35$$35$10 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$21 ((Array Int Bool)) (Array Int Bool))
(declare-fun coerce$35$$35$27 ((_ BitVec 32)) (Array Int Bool))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$25 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$31 ((_ BitVec 64)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$34 ((_ BitVec 64)) (_ BitVec 32))
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$20 ((Array Int Bool)) Str)
(declare-fun coerce$35$$35$11 (Bool) (_ BitVec 64))
(declare-fun coerce$35$$35$5 (Int) (_ BitVec 64))
(declare-fun coerce$35$$35$33 ((_ BitVec 64)) (Array Int Bool))
(declare-fun coerce$35$$35$30 ((_ BitVec 64)) Int)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$28 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$23 ((Array Int Bool)) (_ BitVec 64))
(declare-fun coerce$35$$35$26 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$17 (Str) (_ BitVec 64))
(declare-fun coerce$35$$35$15 (Str) (Array Int Bool))
(declare-fun coerce$35$$35$18 ((Array Int Bool)) Int)
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$9 (Bool) (Array Int Bool))
(declare-fun coerce$35$$35$3 (Int) (Array Int Bool))
(declare-fun coerce$35$$35$29 ((_ BitVec 32)) (_ BitVec 64))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$22 ((Array Int Bool)) (_ BitVec 32))
(declare-fun coerce$35$$35$35 ((_ BitVec 64)) (_ BitVec 64))
(declare-fun coerce$35$$35$19 ((Array Int Bool)) Bool)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$16 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$32 ((_ BitVec 64) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$21 ((Array Int Bool) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$27 ((_ BitVec 32) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$25 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$31 ((_ BitVec 64) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$34 ((_ BitVec 64) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$20 ((Array Int Bool) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Bool (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$5 (Int (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$33 ((_ BitVec 64) (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$30 ((_ BitVec 64) Int) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$28 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 ((Array Int Bool) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$26 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$17 (Str (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$15 (Str (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$18 ((Array Int Bool) Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$3 (Int (Array Int Bool)) Int)
(declare-fun smt_lambda$35$$35$29 ((_ BitVec 32) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$22 ((Array Int Bool) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$35 ((_ BitVec 64) (_ BitVec 64)) Int)
(declare-fun smt_lambda$35$$35$19 ((Array Int Bool) Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$2$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$3$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$4$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$5$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$6$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$7$35$$35$30 () (_ BitVec 64))
(declare-fun lam_arg$35$$35$1$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$24 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (Array Int Bool))
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct lit$36$liquidhaskell$45$0.9.8.2$45$HBZKfLZq3zk3XxT5CzZx6o lit$36$Data.ByteString.Lazy.Char8_LHAssumptions))

(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))

(assert (= (strLen lit$36$Data.ByteString.Lazy.Char8_LHAssumptions) 40))
(assert (= (strLen lit$36$liquidhaskell$45$0.9.8.2$45$HBZKfLZq3zk3XxT5CzZx6o) 44))
(push 1)
(push 1)
(pop 1)
(pop 1)
